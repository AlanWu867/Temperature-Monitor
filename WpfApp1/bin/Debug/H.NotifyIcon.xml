<?xml version="1.0"?>
<doc>
    <assembly>
        <name>H.NotifyIcon</name>
    </assembly>
    <members>
        <member name="T:H.NotifyIcon.BackgroundType">
            <summary>
            
            </summary>
        </member>
        <member name="F:H.NotifyIcon.BackgroundType.Ellipse">
            <summary>
            
            </summary>
        </member>
        <member name="F:H.NotifyIcon.BackgroundType.Rectangle">
            <summary>
            
            </summary>
        </member>
        <member name="F:H.NotifyIcon.BackgroundType.RoundedRectangle">
            <summary>
            
            </summary>
        </member>
        <member name="T:H.NotifyIcon.Core.CursorUtilities">
            <summary>
            Win32 API imports.
            </summary>
        </member>
        <member name="M:H.NotifyIcon.Core.CursorUtilities.CalculatePopupWindowPosition(System.Drawing.Point,System.Drawing.Size,System.Nullable{System.Drawing.Rectangle})">
            <summary>
            Calculates an appropriate pop-up window position using the specified anchor point, pop-up window size, flags, 
            and the optional exclude rectangle. When the specified pop-up window size is smaller than the desktop window size, 
            use the CalculatePopupWindowPosition function to ensure that the pop-up window is fully visible on the desktop window, 
            regardless of the specified anchor point.
            </summary>
            <returns>A structure that specifies the pop-up window position.</returns>
            <exception cref="T:System.Runtime.InteropServices.COMException"></exception>
            
        </member>
        <member name="M:H.NotifyIcon.Core.CursorUtilities.GetDoubleClickTime">
            <summary>
            Retrieves the current double-click time for the mouse.
            </summary>
            <returns>The return value specifies the current double-click time, in milliseconds. The maximum return value is 5000 milliseconds.</returns>
        </member>
        <member name="T:H.NotifyIcon.Core.IconVersion">
            <summary>
            The notify icon version that is used. The higher
            the version, the more capabilities are available.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.IconVersion.Win95">
            <summary>
            Default behavior (legacy Win95).
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.IconVersion.Win2000">
            <summary>
            Behavior representing Win2000 an higher.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.IconVersion.Vista">
            <summary>
            Extended tooltip support, which is available for Vista and later.
            Detailed information about what the different versions do, can be found 
            <a href="https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shell_notifyicona">here</a>
            </summary>
        </member>
        <member name="T:H.NotifyIcon.Core.IconVisibility">
            <summary>
            The visibility of the icon.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.IconVisibility.Visible">
            <summary>
            The icon is visible.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.IconVisibility.Hidden">
            <summary>
            The icon is hidden.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.IconVisibility.Shared">
            <summary>
            The icon resource is shared between multiple icons.
            </summary>
        </member>
        <member name="T:H.NotifyIcon.Core.KeyboardEvent">
            <summary>
            Possible keyboard events.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.KeyboardEvent.ContextMenu">
            <summary>
            The icon was selected with the keyboard
            and Shift-F10 was pressed.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.KeyboardEvent.KeySelect">
            <summary>
            The icon was selected with the keyboard
            and activated with Spacebar or Enter.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.KeyboardEvent.Select">
            <summary>
            The icon was selected with the mouse
            and activated with Enter.
            </summary>
        </member>
        <member name="T:H.NotifyIcon.Core.MessageWindow">
            <summary>
            Receives messages from the taskbar icon through
            window messages of an underlying helper window.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.MessageWindow.CallbackMessageId">
            <summary>
            The ID of messages that are received from the the
            taskbar icon.
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.MessageWindow.TaskbarRestartMessageId">
            <summary>
            The ID of the message that is being received if the
            taskbar is (re)started.
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.MessageWindow.IsDoubleClick">
            <summary>
            Used to track whether a mouse-up event is just
            the aftermath of a double-click and therefore needs
            to be suppressed.
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.MessageWindow.MessageHandler">
            <summary>
            A delegate that processes messages of the hidden
            native window that receives window messages. Storing
            this reference makes sure we don't loose our reference
            to the message window.
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.MessageWindow.WindowId">
            <summary>
            Window class ID.
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.MessageWindow.HWND">
            <summary>
            Handle for the message window.
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.MessageWindow.IsCreated">
            <summary>
            Handle for the message window.
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.MessageWindow.Handle">
            <summary>
            Handle for the message window.
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.MessageWindow.Version">
            <summary>
            The version of the underlying icon. Defines how
            incoming messages are interpreted.
            </summary>
        </member>
        <member name="E:H.NotifyIcon.Core.MessageWindow.ChangeToolTipStateRequest">
            <summary>
            The custom tooltip should be closed or hidden.
            </summary>
        </member>
        <member name="E:H.NotifyIcon.Core.MessageWindow.MouseEventReceived">
            <summary>
            Fired in case the user clicked or moved within
            the taskbar icon area.
            </summary>
        </member>
        <member name="E:H.NotifyIcon.Core.MessageWindow.KeyboardEventReceived">
            <summary>
            Fired in case the user interacted with the taskbar
            icon area with keyboard shortcuts.
            </summary>
        </member>
        <member name="E:H.NotifyIcon.Core.MessageWindow.BalloonToolTipChanged">
            <summary>
            Fired if a balloon ToolTip was either displayed
            or closed (indicated by the boolean flag).
            </summary>
        </member>
        <member name="E:H.NotifyIcon.Core.MessageWindow.TaskbarCreated">
            <summary>
            Fired if the taskbar was created or restarted. Requires the taskbar
            icon to be reset.
            </summary>
        </member>
        <member name="E:H.NotifyIcon.Core.MessageWindow.DpiChanged">
            <summary>
            Fired if dpi change window message received.
            </summary>
        </member>
        <member name="M:H.NotifyIcon.Core.MessageWindow.#ctor">
            <summary>
            Creates a new message sink that receives message from
            a given taskbar icon.
            </summary>
        </member>
        <member name="M:H.NotifyIcon.Core.MessageWindow.Create">
            <summary>
            Creates the helper message window that is used
            to receive messages from the taskbar icon.
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.MessageWindow.IsDisposed">
            <summary>
            Set to true as soon as <c>Dispose</c> has been invoked.
            </summary>
        </member>
        <member name="M:H.NotifyIcon.Core.MessageWindow.Dispose">
            <summary>
            Disposes the object.
            </summary>
            <remarks>This method is not virtual by design. Derived classes
            should override <see cref="M:H.NotifyIcon.Core.MessageWindow.Dispose(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:H.NotifyIcon.Core.MessageWindow.Finalize">
            <summary>
            This destructor will run only if the <see cref="M:H.NotifyIcon.Core.MessageWindow.Dispose"/>
            method does not get called. This gives this base class the
            opportunity to finalize.
            <para>
            Important: Do not provide destructor in types derived from
            this class.
            </para>
            </summary>
        </member>
        <member name="M:H.NotifyIcon.Core.MessageWindow.Dispose(System.Boolean)">
            <summary>
            Removes the windows hook that receives window
            messages and closes the underlying helper window.
            </summary>
        </member>
        <member name="T:H.NotifyIcon.Core.MouseEvent">
            <summary>
            Possible mouse events.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.MouseEvent.MouseMove">
            <summary>
            The mouse was moved withing the
            taskbar icon's area.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.MouseEvent.IconRightMouseDown">
            <summary>
            The right mouse button was clicked.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.MouseEvent.IconLeftMouseDown">
            <summary>
            The left mouse button was clicked.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.MouseEvent.IconRightMouseUp">
            <summary>
            The right mouse button was released.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.MouseEvent.IconLeftMouseUp">
            <summary>
            The left mouse button was released.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.MouseEvent.IconMiddleMouseDown">
            <summary>
            The middle mouse button was clicked.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.MouseEvent.IconMiddleMouseUp">
            <summary>
            The middle mouse button was released.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.MouseEvent.IconDoubleClick">
            <summary>
            The taskbar icon was double clicked.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.MouseEvent.BalloonToolTipClicked">
            <summary>
            The balloon tip was clicked.
            </summary>
        </member>
        <member name="T:H.NotifyIcon.Core.MouseEventExtensions">
            <summary>
            MouseEvent extensions.
            </summary>
        </member>
        <member name="M:H.NotifyIcon.Core.MouseEventExtensions.IsMatch(H.NotifyIcon.Core.MouseEvent,H.NotifyIcon.Core.PopupActivationMode)">
            <summary>
            Checks if a given <see cref="T:H.NotifyIcon.Core.PopupActivationMode"/> is a match for
            an effectively pressed mouse button.
            </summary>
        </member>
        <member name="T:H.NotifyIcon.Core.NotificationIcon">
            <summary>
            Supported icons for the tray's notification messages.
            https://docs.microsoft.com/en-us/windows/win32/api/shellapi/ns-shellapi-notifyicondataa#niif_none-0x00000000
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.NotificationIcon.None">
            <summary>
            The balloon message is displayed without an icon.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.NotificationIcon.Info">
            <summary>
            An information is displayed.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.NotificationIcon.Warning">
            <summary>
            A warning is displayed.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.NotificationIcon.Error">
            <summary>
            An error is displayed.
            </summary>
        </member>
        <member name="T:H.NotifyIcon.Core.PopupActivationMode">
            <summary>
            Defines flags that define when a popup
            is being displyed.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.PopupActivationMode.LeftClick">
            <summary>
            The item is displayed if the user clicks the
            tray icon with the left mouse button.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.PopupActivationMode.RightClick">
            <summary>
            The item is displayed if the user clicks the
            tray icon with the right mouse button.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.PopupActivationMode.DoubleClick">
            <summary>
            The item is displayed if the user double-clicks the
            tray icon.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.PopupActivationMode.LeftOrRightClick">
            <summary>
            The item is displayed if the user clicks the
            tray icon with the left or the right mouse button.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.PopupActivationMode.LeftOrDoubleClick">
            <summary>
            The item is displayed if the user clicks the
            tray icon with the left mouse button or if a
            double-click is being performed.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.PopupActivationMode.MiddleClick">
            <summary>
            The item is displayed if the user clicks the
            tray icon with the middle mouse button.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.PopupActivationMode.All">
            <summary>
            The item is displayed whenever a click occurs.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.PopupActivationMode.None">
            <summary>
            The item is displayed manually from code.
            </summary>
        </member>
        <member name="T:H.NotifyIcon.Core.TrayIcon">
            <summary>
            A Interop proxy to for a taskbar icon (NotifyIcon) that sits in the system's
            taskbar notification area ("system tray").
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.TrayIcon.Id">
            <summary>
            Unique ID. <br/>
            It will be used by the system to store your TrayIcon settings, 
            so it is recommended to make it fixed and unique for each application TrayIcon, not random.
            </summary>
            <remarks>
            Note: Windows associates a Guid with the path of the binary, so you must use the new Guid when you change the path.
            </remarks>
        </member>
        <member name="P:H.NotifyIcon.Core.TrayIcon.IsCreated">
            <summary>
            Indicates whether the taskbar icon has been created or not.
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.TrayIcon.IsDesignMode">
            <summary>
            IsEnabled?
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.TrayIcon.Icon">
            <summary>
            A handle to the icon that should be displayed. Just
            <c>Icon.Handle</c>.
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.TrayIcon.ToolTip">
            <summary>
            
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.TrayIcon.WindowHandle">
            <summary>
            Handle to the window that receives notification messages associated with an icon in the
            taskbar status area.
            By default, if not set, MessageWindow will be created.
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.TrayIcon.MessageWindow">
            <summary>
            Receives messages from the taskbar icon.
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.TrayIcon.Visibility">
            <summary>
            Icon visibility.
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.TrayIcon.Version">
            <summary>
            Current version. Updates after <see cref="M:H.NotifyIcon.Core.TrayIcon.Create"/>.
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.TrayIcon.SupportsCustomToolTips">
            <summary>
            Indicates whether custom tooltips are supported, which depends
            on the OS. Windows Vista or higher is required in order to
            support this feature.
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.TrayIcon.UseStandardTooltip">
            <summary>
            Windows Vista and later. 
            Use the standard tooltip. 
            Normally, when uVersion is set to NOTIFYICON_VERSION_4, 
            the standard tooltip is suppressed and can be replaced by the application-drawn, 
            pop-up UI. If the application wants to show the standard tooltip with NOTIFYICON_VERSION_4, 
            it can specify NIF_SHOWTIP to indicate the standard tooltip should still be shown.
            </summary>
        </member>
        <member name="E:H.NotifyIcon.Core.TrayIcon.Created">
            <summary>
            TrayIcon was created.<br/>
            This can happen in the following cases:<br/>
            - Via direct <see cref="M:H.NotifyIcon.Core.TrayIcon.Create"/> call<br/>
            - Through the <see cref="M:H.NotifyIcon.Core.TrayIcon.ClearNotifications"/> call since its implementation uses TrayIcon re-creation<br/>
            </summary>
        </member>
        <member name="E:H.NotifyIcon.Core.TrayIcon.Removed">
            <summary>
            TrayIcon was removed.<br/>
            This can happen in the following cases:<br/>
            - Via direct <see cref="M:H.NotifyIcon.Core.TrayIcon.TryRemove"/> call<br/>
            - Through the <see cref="M:H.NotifyIcon.Core.TrayIcon.ClearNotifications"/> call since its implementation uses TrayIcon re-creation<br/>
            </summary>
        </member>
        <member name="E:H.NotifyIcon.Core.TrayIcon.VersionChanged">
            <summary>
            Version was changed.<br/>
            This can happen in the following cases:<br/>
            - Via direct <see cref="M:H.NotifyIcon.Core.TrayIcon.Create"/> call<br/>
            - Through the <see cref="M:H.NotifyIcon.Core.TrayIcon.ClearNotifications"/> call since its implementation uses TrayIcon re-creation<br/>
            </summary>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.#ctor(System.Guid)">
            <summary>
            Initializes the taskbar icon and registers a message listener
            in order to receive events from the taskbar area.
            </summary>
            <param name="id">
            Unique ID. <br/>
            It will be used by the system to store your TrayIcon settings, 
            so it is recommended to make it fixed and unique for each application TrayIcon, not random.
            </param>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.#ctor">
            <summary>
            Initializes the taskbar icon and registers a message listener
            in order to receive events from the taskbar area. <br/>
            Creates <see cref="P:H.NotifyIcon.Core.TrayIcon.Id"/> based on the simple name of an Entry assembly. <br/>
            Use other overloads to create multiple icons for the same application.
            </summary>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.#ctor(System.String)">
            <summary>
            Initializes the taskbar icon and registers a message listener
            in order to receive events from the taskbar area. <br/>
            Creates <see cref="P:H.NotifyIcon.Core.TrayIcon.Id"/> based on the specified name. <br/>
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.CreateUniqueGuidFromString(System.String)">
            <summary>
            Creates a unique Guid for the given string using hashing.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.CreateUniqueGuidForEntryAssemblyLocation(System.String)">
            <summary>
            Creates a unique Guid for the entry assembly simple name using hashing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.Create">
            <summary>
            Creates the taskbar icon. This message is invoked during initialization,
            if the taskbar is restarted, and whenever the icon is displayed. <br/>
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.Remove">
            <summary>
            Closes the taskbar icon if required.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.TryRemove">
            <summary>
            Closes the taskbar icon if required.
            </summary>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.UpdateId(System.Guid)">
            <summary>
            Update TrayIcon Id. <br/>
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.UpdateName(System.String)">
            <summary>
            Update TrayIcon Name. <br/>
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.UpdateToolTip(System.String)">
            <summary>
            Sets tooltip message. <br/>
            If <see cref="P:H.NotifyIcon.Core.TrayIcon.IsCreated"/> is <see langword="false"/>, then it simply sets the corresponding property.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.UpdateIcon(System.IntPtr)">
            <summary>
            Set new icon data. <br/>
            If <see cref="P:H.NotifyIcon.Core.TrayIcon.IsCreated"/> is <see langword="false"/>, then it simply sets the corresponding property.
            </summary>
            <param name="handle">The title to display on the balloon tip.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.UpdateVisibility(H.NotifyIcon.Core.IconVisibility)">
            <summary>
            Set new icon state. <br/>
            If <see cref="P:H.NotifyIcon.Core.TrayIcon.IsCreated"/> is <see langword="false"/>, then it simply sets the corresponding property.
            </summary>
            <param name="visibility"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.Show">
            <summary>
            Shows tray icon.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.Hide">
            <summary>
            Hides tray icon.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.ShowNotification(System.String,System.String,H.NotifyIcon.Core.NotificationIcon,System.Nullable{System.IntPtr},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Displays a balloon notification with the specified title,
            text, and predefined icon or custom icon in the taskbar for the specified time period.
            </summary>
            <param name="title">The title to display on the balloon tip.</param>
            <param name="message">The text to display on the balloon tip.</param>
            <param name="icon">A symbol that indicates the severity.</param>
            <param name="customIcon">A custom icon.</param>
            <param name="largeIcon">True to allow large icons (Windows Vista and later).</param>
            <param name="sound">If false do not play the associated sound.</param>
            <param name="respectQuietTime">
            Do not display the balloon notification if the current user is in "quiet time", 
            which is the first hour after a new user logs into his or her account for the first time. 
            During this time, most notifications should not be sent or shown. 
            This lets a user become accustomed to a new computer system without those distractions. 
            Quiet time also occurs for each user after an operating system upgrade or clean installation. 
            A notification sent with this flag during quiet time is not queued; 
            it is simply dismissed unshown. The application can resend the notification later 
            if it is still valid at that time. <br/>
            Because an application cannot predict when it might encounter quiet time, 
            we recommended that this flag always be set on all appropriate notifications 
            by any application that means to honor quiet time. <br/>
            During quiet time, certain notifications should still be sent because 
            they are expected by the user as feedback in response to a user action, 
            for instance when he or she plugs in a USB device or prints a document.<br/>
            If the current user is not in quiet time, this flag has no effect.
            </param>
            <param name="realtime">
            Windows Vista and later. <br/>
            If the balloon notification cannot be displayed immediately, discard it. 
            Use this flag for notifications that represent real-time information 
            which would be meaningless or misleading if displayed at a later time.  <br/>
            For example, a message that states "Your telephone is ringing."
            </param>
            <param name="timeout">
            This member is deprecated as of Windows Vista. <br/>
            Notification display times are now based on system accessibility settings. <br/>
            The system enforces minimum and maximum timeout values.  <br/>
            Values specified in uTimeout that are too large are set to the maximum value. <br/>
            Values that are too small default to the minimum value. <br/>
            The system minimum and maximum timeout values are currently set at 10 seconds and 30 seconds, respectively.
            </param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.ClearNotifications">
            <summary>
            Clears all notifications(active and deffered) by recreating tray icon.
            https://docs.microsoft.com/en-us/windows/win32/api/shellapi/ns-shellapi-notifyicondataa#nif_info-0x00000010
            There's a way to remove notifications without recreating here,
            but I haven't been able to get it to work.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.SetFocus">
            <summary>
            Returns focus to the taskbar notification area. 
            Notification area icons should use this when they have completed their UI operation. 
            For example, if the icon displays a shortcut menu, but the user presses ESC to cancel it, 
            use it to return focus to the notification area.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="P:H.NotifyIcon.Core.TrayIcon.IsDisposed">
            <summary>
            Set to true as soon as <c>Dispose</c> has been invoked.
            </summary>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.EnsureNotDisposed">
            <summary>
            Checks if the object has been disposed and
            raises a <see cref="T:System.ObjectDisposedException"/> in case
            the <see cref="P:H.NotifyIcon.Core.TrayIcon.IsDisposed"/> flag is true.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.EnsureCreated">
            <summary>
            Checks if the object has been disposed and
            raises a <see cref="T:System.InvalidOperationException"/> in case
            the <see cref="P:H.NotifyIcon.Core.TrayIcon.IsDisposed"/> flag is true.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.Finalize">
            <summary>
            This destructor will run only if the <see cref="M:H.NotifyIcon.Core.TrayIcon.Dispose"/>
            method does not get called. This gives this base class the
            opportunity to finalize.
            <para>
            Important: Do not provide destructor in types derived from this class.
            </para>
            </summary>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.Dispose">
            <summary>
            Disposes the object.
            </summary>
            <remarks>This method is not virtual by design. Derived classes
            should override <see cref="M:H.NotifyIcon.Core.TrayIcon.Dispose(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIcon.Dispose(System.Boolean)">
            <summary>
            Closes the tray and releases all resources.
            </summary>
            <summary>
            <c>Dispose(bool disposing)</c> executes in two distinct scenarios.
            If disposing equals <c>true</c>, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            </summary>
            <param name="disposing">If disposing equals <c>false</c>, the method
            has been called by the runtime from inside the finalizer and you
            should not reference other objects. Only unmanaged resources can
            be disposed.</param>
            <remarks>Check the <see cref="P:H.NotifyIcon.Core.TrayIcon.IsDisposed"/> property to determine whether
            the method has already been called.</remarks>
        </member>
        <member name="T:H.NotifyIcon.Core.TrayInfo">
            <summary>
            Resolves the current tray position.
            </summary>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayInfo.IsShellOpen">
            <summary>
            Returns <see langword="true"/> if shell is open.
            </summary>
            <returns>Tray coordinates.</returns>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayInfo.IsNotifyIconOverflowWindowOpen">
            <summary>
            Returns <see langword="true"/> if notify icon overflow window is open.
            </summary>
            <returns>Tray coordinates.</returns>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayInfo.GetTrayLocation(System.Int32)">
            <summary>
            Gets the position of the system tray.
            </summary>
            <returns>Tray coordinates.</returns>
        </member>
        <member name="T:H.NotifyIcon.Core.WindowUtilities">
            <summary>
            Win32 API imports.
            </summary>
        </member>
        <member name="M:H.NotifyIcon.Core.WindowUtilities.RunMessageLoop">
            <summary>
            Starts message processing on the current thread and blocks it until a WM_QUIT message or error is received.
            </summary>
        </member>
        <member name="M:H.NotifyIcon.Core.WindowUtilities.SetForegroundWindow(System.IntPtr)">
            <summary>
            Brings the thread that created the specified window into the foreground and activates the window.
            </summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window that should be activated and brought to the foreground.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setforegroundwindow#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>bool</b> If the window was brought to the foreground, the return value is true.</para>
            <para>If the window was not brought to the foreground, the return value is false.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setforegroundwindow">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:H.NotifyIcon.Core.WindowUtilities.HideWindow(System.IntPtr)">
            <summary>Sets the specified window's show state.</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showwindow#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>bool</b> If the window was previously visible, the return value is true. If the window was previously hidden, the return value is false.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showwindow">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:H.NotifyIcon.Core.WindowUtilities.IsPackaged">
            <summary>
            Returns true if app is packaged.
            </summary>
            <returns></returns>
        </member>
        <member name="M:H.NotifyIcon.Core.WindowUtilities.ShowWindow(System.IntPtr)">
            <summary>Sets the specified window's show state.</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showwindow#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>bool</b> If the window was previously visible, the return value is true. If the window was previously hidden, the return value is false.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showwindow">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:H.NotifyIcon.Core.WindowUtilities.MakeTransparent(System.IntPtr)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:H.NotifyIcon.Core.PopupItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.PopupItem.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:H.NotifyIcon.Core.PopupItem.Visible">
            <summary>
            
            </summary>
        </member>
        <member name="T:H.NotifyIcon.Core.PopupMenu">
            <inheritdoc/>
        </member>
        <member name="P:H.NotifyIcon.Core.PopupMenu.Items">
            <summary>
            
            </summary>
        </member>
        <member name="M:H.NotifyIcon.Core.PopupMenu.Show(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="ownerHandle"></param>
            <param name="x"></param>
            <param name="y"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:H.NotifyIcon.Core.PopupMenuItem">
            <inheritdoc/>
        </member>
        <member name="M:H.NotifyIcon.Core.PopupMenuItem.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:H.NotifyIcon.Core.PopupMenuItem.#ctor(System.String,System.EventHandler{System.EventArgs})">
            <inheritdoc/>
        </member>
        <member name="E:H.NotifyIcon.Core.PopupMenuItem.Click">
            <inheritdoc/>
        </member>
        <member name="P:H.NotifyIcon.Core.PopupMenuItem.Checked">
            <inheritdoc/>
        </member>
        <member name="P:H.NotifyIcon.Core.PopupMenuItem.Enabled">
            <inheritdoc/>
        </member>
        <member name="P:H.NotifyIcon.Core.PopupMenuItem.SubMenu">
            <inheritdoc/>
        </member>
        <member name="P:H.NotifyIcon.Core.PopupMenuItem.Text">
            <inheritdoc/>
        </member>
        <member name="P:H.NotifyIcon.Core.PopupMenuItem.Break">
            <inheritdoc/>
        </member>
        <member name="M:H.NotifyIcon.Core.PopupMenuItem.OnClick">
            <summary>
            Raises the <see cref="E:H.NotifyIcon.Core.PopupMenuItem.Click"/> event.
            </summary>
        </member>
        <member name="T:H.NotifyIcon.Core.PopupMenuSeparator">
            <inheritdoc/>
        </member>
        <member name="T:H.NotifyIcon.Core.SystemPopupMenuItemBreak">
            <summary>
            
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.SystemPopupMenuItemBreak.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.SystemPopupMenuItemBreak.MenuBreak">
            <summary>
            
            </summary>
        </member>
        <member name="F:H.NotifyIcon.Core.SystemPopupMenuItemBreak.MenuBarBreak">
            <summary>
            
            </summary>
        </member>
        <member name="T:H.NotifyIcon.Core.TrayIconWithContextMenu">
            <inheritdoc/>
        </member>
        <member name="P:H.NotifyIcon.Core.TrayIconWithContextMenu.ContextMenu">
            <summary>
            
            </summary>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIconWithContextMenu.#ctor(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIconWithContextMenu.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIconWithContextMenu.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIconWithContextMenu.Create">
            <inheritdoc/>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIconWithContextMenu.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:H.NotifyIcon.Core.TrayIconWithContextMenu.ShowContextMenu">
            <summary>
            
            </summary>
        </member>
        <member name="T:H.NotifyIcon.EfficiencyMode.EfficiencyModeUtilities">
            <summary>
            Based on: <br/>
            <see href="https://devblogs.microsoft.com/performance-diagnostics/reduce-process-interference-with-task-manager-efficiency-mode"/> <br/>
            <see href="https://devblogs.microsoft.com/performance-diagnostics/introducing-ecoqos/"/> <br/>
            </summary>
        </member>
        <member name="M:H.NotifyIcon.EfficiencyMode.EfficiencyModeUtilities.SetProcessQualityOfServiceLevel(H.NotifyIcon.EfficiencyMode.QualityOfServiceLevel)">
            <summary>
            Based on <see href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setprocessinformation"/>
            </summary>
        </member>
        <member name="M:H.NotifyIcon.EfficiencyMode.EfficiencyModeUtilities.SetProcessPriorityClass(H.NotifyIcon.EfficiencyMode.ProcessPriorityClass)">
            <summary>
            Based on <see href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setpriorityclass"/>
            </summary>
        </member>
        <member name="M:H.NotifyIcon.EfficiencyMode.EfficiencyModeUtilities.SetEfficiencyMode(System.Boolean)">
            <summary>
            Enables/disables efficient mode for process <br/>
            Based on: <see href="https://devblogs.microsoft.com/performance-diagnostics/reduce-process-interference-with-task-manager-efficiency-mode/"/> 
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:H.NotifyIcon.EfficiencyMode.ProcessPriorityClass">
            <summary>
            Based on: <br/>
            <see href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setpriorityclass#parameters"/>
            </summary>
        </member>
        <member name="F:H.NotifyIcon.EfficiencyMode.ProcessPriorityClass.Default">
            <summary>
            Process with no special scheduling needs.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.EfficiencyMode.ProcessPriorityClass.Idle">
            <summary>
            Process whose threads run only when the system is idle. 
            The threads of the process are preempted by the threads of any process running in a 
            higher priority class. An example is a screen saver. 
            The idle-priority class is inherited by child processes.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.EfficiencyMode.ProcessPriorityClass.BelowNormal">
            <summary>
            Process that has priority above IDLE_PRIORITY_CLASS but below NORMAL_PRIORITY_CLASS.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.EfficiencyMode.ProcessPriorityClass.Normal">
            <summary>
            Process with no special scheduling needs.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.EfficiencyMode.ProcessPriorityClass.AboveNormal">
            <summary>
            Process that has priority above NORMAL_PRIORITY_CLASS but below HIGH_PRIORITY_CLASS.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.EfficiencyMode.ProcessPriorityClass.High">
            <summary>
            Process that performs time-critical tasks that must be executed immediately.
            The threads of the process preempt the threads of normal or idle priority class processes. 
            An example is the Task List, which must respond quickly when called by the user, 
            regardless of the load on the operating system. Use extreme care when using the high-priority class, 
            because a high-priority class application can use nearly all available CPU time.
            </summary>
        </member>
        <member name="F:H.NotifyIcon.EfficiencyMode.ProcessPriorityClass.Realtime">
            <summary>
            Process that has the highest possible priority. 
            The threads of the process preempt the threads of all other processes, 
            including operating system processes performing important tasks. 
            For example, a real-time process that executes for more than a very brief interval 
            can cause disk caches not to flush or cause the mouse to be unresponsive.
            </summary>
        </member>
        <member name="T:H.NotifyIcon.EfficiencyMode.QualityOfServiceLevel">
            <summary>
            The system maintains multiple QoS levels, each with differentiated performance and power efficiency.  <br/>
            Windows provides standard default settings for scheduling and processor power management for each QoS level.  <br/>
            The precise tuning of each QoS level for processor power management and heterogeneous scheduling can be modified through Windows Provisioning. <br/>
            For more information on performance tuning and provisioning, see: <br/>
            <see href="https://docs.microsoft.com/en-us/windows/win32/procthread/quality-of-service#quality-of-service-levels"/>
            </summary>
        </member>
        <member name="F:H.NotifyIcon.EfficiencyMode.QualityOfServiceLevel.Default">
            <summary>
            Default system managed behavior. Let system manage all power throttling. <br/>
            </summary>
        </member>
        <member name="F:H.NotifyIcon.EfficiencyMode.QualityOfServiceLevel.High">
            <summary>
            Description: Windowed applications that are in the foreground and in focus, or audible, 
            and explicitly tag processes with SetProcessInformation or threads with SetThreadInformation. <br/>
            Performance and power: Standard high performance. <br/>
            Release: 1709 <br/>
            </summary>
        </member>
        <member name="F:H.NotifyIcon.EfficiencyMode.QualityOfServiceLevel.Medium">
            <summary>
            Description: Windowed applications that may be visible to the end user but are not in focus. <br/>
            Performance and power: Varies by platform, between High and Low. <br/>
            Release: 1709 <br/>
            </summary>
        </member>
        <member name="F:H.NotifyIcon.EfficiencyMode.QualityOfServiceLevel.Low">
            <summary>
            Description: Windowed applications that are not visible or audible to the end user. <br/>
            Performance and power: On battery, selects most efficient CPU frequency and schedules to efficient core. <br/>
            Release: 1709 <br/>
            </summary>
        </member>
        <member name="F:H.NotifyIcon.EfficiencyMode.QualityOfServiceLevel.Utility">
            <summary>
            Description: Background services. <br/>
            Performance and power: On battery, selects most efficient CPU frequency and schedules to efficient cores. <br/>
            Release: Windows 11 22H2 <br/>
            </summary>
        </member>
        <member name="F:H.NotifyIcon.EfficiencyMode.QualityOfServiceLevel.Eco">
            <summary>
            Description: Applications that explicitly tag processes with SetProcessInformation or threads with SetThreadInformation. <br/>
            Performance and power: Always selects most efficient CPU frequency and schedules to efficient cores. <br/>
            Release: Windows 11 <br/>
            </summary>
        </member>
        <member name="F:H.NotifyIcon.EfficiencyMode.QualityOfServiceLevel.Media">
            <summary>
            Description: Threads explicitly tagged by the Multimedia Class Scheduler Service to denote multimedia batch buffering. <br/>
            Performance and power: CPU frequency reduced for efficient batch processing. <br/>
            Release: 2004 <br/>
            </summary>
        </member>
        <member name="F:H.NotifyIcon.EfficiencyMode.QualityOfServiceLevel.Deadline">
            <summary>
            Description: Threads explicitly tagged by Multimedia Class Scheduler Service to denote that audio threads require performance to meet deadlines. <br/>
            Performance and power: High performance to meet media deadlines. <br/>
            Release: 2004 <br/>
            </summary>
        </member>
        <member name="T:H.NotifyIcon.KeyboardTrayIconEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:H.NotifyIcon.KeyboardTrayIconEventArgs.KeyboardEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:H.NotifyIcon.KeyboardTrayIconEventArgs.#ctor(H.NotifyIcon.Core.KeyboardEvent)">
            <summary>
            
            </summary>
            <param name="keyboardEvent"></param>
        </member>
        <member name="M:H.NotifyIcon.KeyboardTrayIconEventArgs.#ctor(H.NotifyIcon.Core.KeyboardEvent,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="keyboardEvent"></param>
            <param name="point"></param>
        </member>
        <member name="T:H.NotifyIcon.MouseTrayIconEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:H.NotifyIcon.MouseTrayIconEventArgs.MouseEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:H.NotifyIcon.MouseTrayIconEventArgs.#ctor(H.NotifyIcon.Core.MouseEvent)">
            <summary>
            
            </summary>
            <param name="mouseEvent"></param>
        </member>
        <member name="M:H.NotifyIcon.MouseTrayIconEventArgs.#ctor(H.NotifyIcon.Core.MouseEvent,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="mouseEvent"></param>
            <param name="point"></param>
        </member>
        <member name="T:H.NotifyIcon.TrayIconEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:H.NotifyIcon.TrayIconEventArgs.Point">
            <summary>
            
            </summary>
        </member>
        <member name="M:H.NotifyIcon.TrayIconEventArgs.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:H.NotifyIcon.TrayIconEventArgs.#ctor(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="T:H.NotifyIcon.IconGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:H.NotifyIcon.IconGenerator.Generate(System.Drawing.Brush,System.Drawing.Brush,System.Drawing.Pen,H.NotifyIcon.BackgroundType,System.Single,System.Nullable{System.Drawing.RectangleF},System.String,System.Drawing.Font,System.Nullable{System.Drawing.RectangleF},System.Drawing.Image,System.Int32)">
            <summary>
            Generates <paramref name="size"/> x <paramref name="size"/> standard icon with selected parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="T:H.NotifyIcon.Interop.IconUtilities">
            <summary>
            
            </summary>
        </member>
        <member name="M:H.NotifyIcon.Interop.IconUtilities.GetSize(System.IntPtr)">
            <summary>
            Based on: <see href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-iconinfo#members"/>
            </summary>
            <param name="hIcon"></param>
            <returns></returns>
        </member>
        <member name="M:H.NotifyIcon.Interop.IconUtilities.GetRequiredCustomIconSize(System.Boolean)">
            <summary>
            Based on: <see href="https://docs.microsoft.com/en-us/windows/win32/api/shellapi/ns-shellapi-notifyicondataa#niif_large_icon-0x00000020"/>
            </summary>
            <param name="largeIcon"></param>
            <returns></returns>
        </member>
        <member name="M:H.NotifyIcon.Interop.InteropUtilities.EnsureNonNull(Windows.Win32.Foundation.HWND)">
            <exception cref="T:System.Runtime.InteropServices.COMException"></exception>
        </member>
        <member name="M:H.NotifyIcon.Interop.InteropUtilities.EnsureNonZero(System.UInt16)">
            <exception cref="T:System.Runtime.InteropServices.COMException"></exception>
        </member>
        <member name="M:H.NotifyIcon.Interop.InteropUtilities.EnsureNonZero(System.UInt32)">
            <exception cref="T:System.Runtime.InteropServices.COMException"></exception>
        </member>
        <member name="M:H.NotifyIcon.Interop.InteropUtilities.EnsureNonZero(System.Int32)">
            <exception cref="T:System.Runtime.InteropServices.COMException"></exception>
        </member>
        <member name="M:H.NotifyIcon.Interop.InteropUtilities.EnsureNonZero(System.IntPtr)">
            <exception cref="T:System.Runtime.InteropServices.COMException"></exception>
        </member>
        <member name="M:H.NotifyIcon.Interop.InteropUtilities.EnsureNonZero(System.UIntPtr,System.Exception)">
            <exception cref="T:System.Runtime.InteropServices.COMException"></exception>
        </member>
        <member name="M:H.NotifyIcon.Interop.InteropUtilities.EnsureNonZero(Windows.Win32.Foundation.BOOL)">
            <exception cref="T:System.Runtime.InteropServices.COMException"></exception>
        </member>
        <member name="M:H.NotifyIcon.Interop.InteropUtilities.EnsureNonZero(Windows.Win32.Graphics.Gdi.HBRUSH)">
            <exception cref="T:System.Runtime.InteropServices.COMException"></exception>
        </member>
        <member name="T:H.NotifyIcon.Interop.TrayIconMethods">
            <summary>
            A Interop proxy to for a taskbar icon (NotifyIcon) that sits in the system's
            taskbar notification area ("system tray").
            </summary>
        </member>
        <member name="T:H.NotifyIcon.Interop.User32Methods">
            <summary>
            
            </summary>
        </member>
        <member name="T:Windows.Win32.PInvoke">
            <content>
            Contains extern methods from "User32.dll".
            </content>
            <content>
            Contains extern methods from "Shell32.dll".
            </content>
            <content>
            Contains extern methods from "ComCtl32.dll".
            </content>
            <content>
            Contains extern methods from "Gdi32.dll".
            </content>
            <content>
            Contains extern methods from "Kernel32.dll".
            </content>
            <content>
            Contains extern methods from "User32.dll".
            </content>
        </member>
        <member name="M:Windows.Win32.PInvoke.SetWindowLongPtr(Windows.Win32.Foundation.HWND,Windows.Win32.UI.WindowsAndMessaging.WINDOW_LONG_PTR_INDEX,System.IntPtr)">
            <summary>Changes an attribute of the specified window.</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window and, indirectly, the class to which the window belongs. The <b>SetWindowLongPtr</b> function fails if the process that owns the window specified by the <i>hWnd</i> parameter is at a higher process privilege in the UIPI hierarchy than the process the calling thread resides in. <b>Windows XP/2000:  </b> The <b>SetWindowLongPtr</b> function fails if the window specified by the <i>hWnd</i> parameter does not belong to the same process as the calling thread.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowlongptrw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="nIndex">Type: <b>int</b></param>
            <param name="dwNewLong">
            <para>Type: <b>LONG_PTR</b> The replacement value.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowlongptrw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>LONG_PTR</b> If the function succeeds, the return value is the previous value of the specified offset. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If the previous value is zero and the function succeeds, the return value is zero, but the function does not clear the last error information. To determine success or failure, clear the last error information by calling <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-setlasterror">SetLastError</a> with 0, then call <b>SetWindowLongPtr</b>. Function failure will be indicated by a return value of zero and a <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> result that is nonzero.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowlongptrw">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetWindowLongPtr(Windows.Win32.Foundation.HWND,Windows.Win32.UI.WindowsAndMessaging.WINDOW_LONG_PTR_INDEX)">
            <summary>Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window and, indirectly, the class to which the window belongs.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowlongptrw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="nIndex">Type: <b>int</b></param>
            <returns>
            <para>Type: <b>LONG_PTR</b> If the function succeeds, the return value is the requested value. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If <a href="/windows/desktop/api/winuser/nf-winuser-setwindowlonga">SetWindowLong</a> or <a href="/windows/desktop/api/winuser/nf-winuser-setwindowlongptra">SetWindowLongPtr</a> has not been called previously, <b>GetWindowLongPtr</b> returns zero for values in the extra window or class memory.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowlongptrw">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SHAppBarMessage(System.UInt32,Windows.Win32.UI.Shell.APPBARDATA32@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.SHAppBarMessage(System.UInt32,Windows.Win32.UI.Shell.APPBARDATA32*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.SHAppBarMessage(System.UInt32,Windows.Win32.UI.Shell.APPBARDATA32*)">
            <summary>Sends an appbar message to the system.</summary>
            <param name="dwMessage">Type: <b>DWORD</b></param>
            <param name="pData">
            <para>Type: <b>PAPPBARDATA</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/shellapi/ns-shellapi-appbardata">APPBARDATA</a> structure. The content of the structure on entry and on exit depends on the value set in the <i>dwMessage</i> parameter. See the individual message pages for specifics.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/nf-shellapi-shappbarmessage#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>UINT_PTR</b> This function returns a message-dependent value. For more information, see the Windows SDK documentation for the specific appbar message sent. Links to those documents are given in the See Also section.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/nf-shellapi-shappbarmessage">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SHAppBarMessage(System.UInt32,Windows.Win32.UI.Shell.APPBARDATA64@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.SHAppBarMessage(System.UInt32,Windows.Win32.UI.Shell.APPBARDATA64*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.SHAppBarMessage(System.UInt32,Windows.Win32.UI.Shell.APPBARDATA64*)">
            <summary>Sends an appbar message to the system.</summary>
            <param name="dwMessage">Type: <b>DWORD</b></param>
            <param name="pData">
            <para>Type: <b>PAPPBARDATA</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/shellapi/ns-shellapi-appbardata">APPBARDATA</a> structure. The content of the structure on entry and on exit depends on the value set in the <i>dwMessage</i> parameter. See the individual message pages for specifics.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/nf-shellapi-shappbarmessage#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>UINT_PTR</b> This function returns a message-dependent value. For more information, see the Windows SDK documentation for the specific appbar message sent. Links to those documents are given in the See Also section.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/nf-shellapi-shappbarmessage">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.Shell_NotifyIcon(Windows.Win32.UI.Shell.NOTIFY_ICON_MESSAGE,Windows.Win32.UI.Shell.NOTIFYICONDATAW64@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.Shell_NotifyIcon(Windows.Win32.UI.Shell.NOTIFY_ICON_MESSAGE,Windows.Win32.UI.Shell.NOTIFYICONDATAW64*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.Shell_NotifyIcon(Windows.Win32.UI.Shell.NOTIFY_ICON_MESSAGE,Windows.Win32.UI.Shell.NOTIFYICONDATAW32*)">
            <summary>Sends a message to the taskbar's status area.</summary>
            <param name="dwMessage">Type: <b>DWORD</b></param>
            <param name="lpData">
            <para>Type: <b>PNOTIFYICONDATA</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/shellapi/ns-shellapi-notifyicondataa">NOTIFYICONDATA</a> structure. The content of the structure depends on the value of <i>dwMessage</i>. It can define an icon to add to the notification area, cause that icon to display a notification, or identify an icon to modify or delete.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/nf-shellapi-shell_notifyiconw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. If <i>dwMessage</i> is set to NIM_SETVERSION, the function returns <b>TRUE</b> if the version was successfully changed, or <b>FALSE</b> if the requested version is not supported.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/nf-shellapi-shell_notifyiconw">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.Shell_NotifyIcon(Windows.Win32.UI.Shell.NOTIFY_ICON_MESSAGE,Windows.Win32.UI.Shell.NOTIFYICONDATAW32@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.Shell_NotifyIcon(Windows.Win32.UI.Shell.NOTIFY_ICON_MESSAGE,Windows.Win32.UI.Shell.NOTIFYICONDATAW32*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.Shell_NotifyIcon(Windows.Win32.UI.Shell.NOTIFY_ICON_MESSAGE,Windows.Win32.UI.Shell.NOTIFYICONDATAW64*)">
            <summary>Sends a message to the taskbar's status area.</summary>
            <param name="dwMessage">Type: <b>DWORD</b></param>
            <param name="lpData">
            <para>Type: <b>PNOTIFYICONDATA</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/shellapi/ns-shellapi-notifyicondataa">NOTIFYICONDATA</a> structure. The content of the structure depends on the value of <i>dwMessage</i>. It can define an icon to add to the notification area, cause that icon to display a notification, or identify an icon to modify or delete.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/nf-shellapi-shell_notifyiconw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise. If <i>dwMessage</i> is set to NIM_SETVERSION, the function returns <b>TRUE</b> if the version was successfully changed, or <b>FALSE</b> if the requested version is not supported.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/nf-shellapi-shell_notifyiconw">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.DefSubclassProc(Windows.Win32.Foundation.HWND,System.UInt32,Windows.Win32.Foundation.WPARAM,Windows.Win32.Foundation.LPARAM)">
            <summary>Calls the next handler in a window's subclass chain. The last handler in the subclass chain calls the original window procedure for the window.</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window being subclassed.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//commctrl/nf-commctrl-defsubclassproc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="uMsg">
            <para>Type: <b>UINT</b> A value of type unsigned <b>int</b> that specifies a window message.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//commctrl/nf-commctrl-defsubclassproc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="wParam">
            <para>Type: <b>WPARAM</b> Specifies additional message information. The contents of this parameter depend on the value of the window message.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//commctrl/nf-commctrl-defsubclassproc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lParam">
            <para>Type: <b>LPARAM</b> Specifies additional message information. The contents of this parameter depend on the value of the window message. Note: On 64-bit versions of Windows LPARAM is a 64-bit value.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//commctrl/nf-commctrl-defsubclassproc#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>LRESULT</b> The returned value is specific to the message sent. This value should be ignored.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//commctrl/nf-commctrl-defsubclassproc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SetWindowSubclass(Windows.Win32.Foundation.HWND,Windows.Win32.UI.Shell.SUBCLASSPROC,System.UIntPtr,System.UIntPtr)">
            <summary>Installs or updates a window subclass callback.</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> The handle of the window being subclassed.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//commctrl/nf-commctrl-setwindowsubclass#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pfnSubclass">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/commctrl/nc-commctrl-subclassproc">SUBCLASSPROC</a></b> A pointer to a window procedure. This pointer and the subclass ID uniquely identify this subclass callback. For the callback function prototype, see <a href="https://docs.microsoft.com/windows/desktop/api/commctrl/nc-commctrl-subclassproc">SUBCLASSPROC</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//commctrl/nf-commctrl-setwindowsubclass#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="uIdSubclass">
            <para>Type: <b>UINT_PTR</b> The subclass ID. This ID together with the subclass procedure uniquely identify a subclass. To remove a subclass, pass the subclass procedure and this value to the <a href="https://docs.microsoft.com/windows/desktop/api/commctrl/nf-commctrl-removewindowsubclass">RemoveWindowSubclass</a> function. This value is passed to the subclass procedure in the uIdSubclass parameter.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//commctrl/nf-commctrl-setwindowsubclass#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="dwRefData">
            <para>Type: <b>DWORD_PTR</b> <b>DWORD_PTR</b> to reference data. The meaning of this value is determined by the calling application. This value is passed to the subclass procedure in the dwRefData parameter. A different dwRefData is associated with each combination of window handle, subclass procedure and uIdSubclass.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//commctrl/nf-commctrl-setwindowsubclass#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> <b>TRUE</b> if the subclass callback was successfully installed; otherwise, <b>FALSE</b>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//commctrl/nf-commctrl-setwindowsubclass">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.DeleteObject(Windows.Win32.Graphics.Gdi.HGDIOBJ)">
            <summary>The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid.</summary>
            <param name="ho">A handle to a logical pen, brush, font, bitmap, region, or palette.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the specified handle is not valid or is currently selected into a DC, the return value is zero.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//wingdi/nf-wingdi-deleteobject">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.CreateSolidBrush_SafeHandle(System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.CreateSolidBrush(System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.CreateSolidBrush(System.UInt32)">
            <summary>The CreateSolidBrush function creates a logical brush that has the specified solid color.</summary>
            <param name="color">The color of the brush. To create a <a href="https://docs.microsoft.com/windows/desktop/gdi/colorref">COLORREF</a> color value, use the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-rgb">RGB</a> macro.</param>
            <returns>
            <para>If the function succeeds, the return value identifies a logical brush. If the function fails, the return value is <b>NULL</b>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//wingdi/nf-wingdi-createsolidbrush">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.FreeLibrary(Windows.Win32.Foundation.HINSTANCE)">
            <summary>Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count.</summary>
            <param name="hLibModule">
            <para>A handle to the loaded library module. The <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibrarya">LoadLibrary</a>, <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibraryexa">LoadLibraryEx</a>, <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandlea">GetModuleHandle</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandleexa">GetModuleHandleEx</a> function returns this handle.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//libloaderapi/nf-libloaderapi-freelibrary#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call the <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//libloaderapi/nf-libloaderapi-freelibrary">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetCurrentPackageId(System.UInt32*,System.Byte*)">
            <summary>Gets the package identifier (ID) for the calling process.</summary>
            <param name="bufferLength">
            <para>Type: <b>UINT32*</b> On input, the size of <i>buffer</i>, in bytes. On output, the size of the structure returned, in bytes.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//appmodel/nf-appmodel-getcurrentpackageid#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="buffer">
            <para>Type: <b>BYTE*</b> The package ID, represented as a <a href="https://docs.microsoft.com/windows/desktop/api/appmodel/ns-appmodel-package_id">PACKAGE_ID</a> structure.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//appmodel/nf-appmodel-getcurrentpackageid#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>LONG</b> If the function succeeds it returns <b>ERROR_SUCCESS</b>. Otherwise, the function returns an error code. The possible error codes include the following. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//appmodel/nf-appmodel-getcurrentpackageid">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.CloseHandle(Windows.Win32.Foundation.HANDLE)">
            <summary>Closes an open object handle.</summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If the application is running under a debugger,  the function will throw an exception if it receives either a  handle value that is not valid  or a pseudo-handle value. This can happen if you close a handle twice, or if you  call <b>CloseHandle</b> on a handle returned by the <a href="/windows/desktop/api/fileapi/nf-fileapi-findfirstfilea">FindFirstFile</a> function instead of calling the <a href="/windows/desktop/api/fileapi/nf-fileapi-findclose">FindClose</a> function.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//handleapi/nf-handleapi-closehandle">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetCurrentProcess_SafeHandle">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetCurrentProcess"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetCurrentProcess">
            <summary>Retrieves a pseudo handle for the current process.</summary>
            <returns>The return value is a pseudo handle to the current process.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//processthreadsapi/nf-processthreadsapi-getcurrentprocess">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SetProcessInformation(System.Runtime.InteropServices.SafeHandle,Windows.Win32.System.Threading.PROCESS_INFORMATION_CLASS,System.Void*,System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.SetProcessInformation(Windows.Win32.Foundation.HANDLE,Windows.Win32.System.Threading.PROCESS_INFORMATION_CLASS,System.Void*,System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.SetProcessInformation(Windows.Win32.Foundation.HANDLE,Windows.Win32.System.Threading.PROCESS_INFORMATION_CLASS,System.Void*,System.UInt32)">
            <summary>Sets information for the specified process.</summary>
            <param name="hProcess">
            <para>A handle to the process. This handle must have the <b>PROCESS_SET_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com/windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//processthreadsapi/nf-processthreadsapi-setprocessinformation#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ProcessInformationClass">A member of the [PROCESS_INFORMATION_CLASS](./ne-processthreadsapi-process_information_class.md) enumeration specifying the kind of information to set.</param>
            <param name="ProcessInformation">
            <para>Pointer to an object that contains the type of information specified by the <i>ProcessInformationClass</i> parameter. If the <i>ProcessInformationClass</i> parameter is <b>ProcessMemoryPriority</b>, this parameter must point to a <a href="https://docs.microsoft.com/windows/win32/api/processthreadsapi/ns-processthreadsapi-memory_priority_information">MEMORY_PRIORITY_INFORMATION</a> structure. If the <i>ProcessInformationClass</i> parameter is <b>ProcessPowerThrottling</b>, this parameter must point to a <a href="https://docs.microsoft.com/windows/win32/api/processthreadsapi/ns-processthreadsapi-process_power_throttling_state">PROCESS_POWER_THROTTLING_STATE</a> structure. If the <i>ProcessInformationClass</i> parameter is <b>ProcessLeapSecondInfo</b>, this parameter must point to a <a href="https://docs.microsoft.com/windows/win32/api/processthreadsapi/ns-processthreadsapi-process_leap_second_info">PROCESS_LEAP_SECOND_INFO</a> structure.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//processthreadsapi/nf-processthreadsapi-setprocessinformation#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ProcessInformationSize">
            <para>The size in bytes of the structure specified by the <i>ProcessInformation</i> parameter. If the <i>ProcessInformationClass</i> parameter is <b>ProcessMemoryPriority</b>, this parameter must be <c>sizeof(MEMORY_PRIORITY_INFORMATION)</c>. If the <i>ProcessInformationClass</i> parameter is <b>ProcessPowerThrottling</b>, this parameter must be <c>sizeof(PROCESS_POWER_THROTTLING_STATE)</c>. If the <i>ProcessInformationClass</i> parameter is <b>ProcessLeapSecondInfo</b>, this parameter must be <c>sizeof(PROCESS_LEAP_SECOND_INFO)</c>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//processthreadsapi/nf-processthreadsapi-setprocessinformation#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//processthreadsapi/nf-processthreadsapi-setprocessinformation">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SetPriorityClass(System.Runtime.InteropServices.SafeHandle,Windows.Win32.System.Threading.PROCESS_CREATION_FLAGS)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.SetPriorityClass(Windows.Win32.Foundation.HANDLE,Windows.Win32.System.Threading.PROCESS_CREATION_FLAGS)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.SetPriorityClass(Windows.Win32.Foundation.HANDLE,Windows.Win32.System.Threading.PROCESS_CREATION_FLAGS)">
            <summary>Sets the priority class for the specified process. This value together with the priority value of each thread of the process determines each thread's base priority level.</summary>
            <param name="hProcess">
            <para>A handle to the process.</para>
            <para>The handle must have the <b>PROCESS_SET_INFORMATION</b> access right. For more information, see <a href="https://docs.microsoft.com/windows/desktop/ProcThread/process-security-and-access-rights">Process Security and Access Rights</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//processthreadsapi/nf-processthreadsapi-setpriorityclass#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="dwPriorityClass"></param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//processthreadsapi/nf-processthreadsapi-setpriorityclass">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetCurrentThreadId">
            <summary>Retrieves the thread identifier of the calling thread.</summary>
            <returns>The return value is the thread identifier of the calling thread.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//processthreadsapi/nf-processthreadsapi-getcurrentthreadid">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.DestroyMenu(Windows.Win32.UI.WindowsAndMessaging.HMENU)">
            <summary>Destroys the specified menu and frees any memory that the menu occupies.</summary>
            <param name="hMenu">
            <para>Type: <b>HMENU</b> A handle to the menu to be destroyed.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroymenu#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroymenu">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.CreateWindowEx(Windows.Win32.UI.WindowsAndMessaging.WINDOW_EX_STYLE,System.String,System.String,Windows.Win32.UI.WindowsAndMessaging.WINDOW_STYLE,System.Int32,System.Int32,System.Int32,System.Int32,Windows.Win32.Foundation.HWND,System.Runtime.InteropServices.SafeHandle,System.Runtime.InteropServices.SafeHandle,System.Void*)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.CreateWindowEx(Windows.Win32.UI.WindowsAndMessaging.WINDOW_EX_STYLE,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.UI.WindowsAndMessaging.WINDOW_STYLE,System.Int32,System.Int32,System.Int32,System.Int32,Windows.Win32.Foundation.HWND,Windows.Win32.UI.WindowsAndMessaging.HMENU,Windows.Win32.Foundation.HINSTANCE,System.Void*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.CreateWindowEx(Windows.Win32.UI.WindowsAndMessaging.WINDOW_EX_STYLE,Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR,Windows.Win32.UI.WindowsAndMessaging.WINDOW_STYLE,System.Int32,System.Int32,System.Int32,System.Int32,Windows.Win32.Foundation.HWND,Windows.Win32.UI.WindowsAndMessaging.HMENU,Windows.Win32.Foundation.HINSTANCE,System.Void*)">
            <summary>Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the CreateWindow function.</summary>
            <param name="dwExStyle">
            <para>Type: <b>DWORD</b> The extended window style of the window being created. For a list of possible values, see  <a href="https://docs.microsoft.com/windows/desktop/winmsg/extended-window-styles">Extended Window Styles</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpClassName">
            <para>Type: <b>LPCTSTR</b> A <b>null</b>-terminated string or a class atom created by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero. If <i>lpClassName</i> is a string, it specifies the window class name. The class name can be any name registered with <b>RegisterClass</b> or <b>RegisterClassEx</b>, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined <a href="https://docs.microsoft.com/windows/desktop/winmsg/about-window-classes">system class</a> names.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpWindowName">
            <para>Type: <b>LPCTSTR</b> The window name. If the window style specifies a title bar, the window title pointed to by <i>lpWindowName</i> is displayed in the title bar. When using <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createwindowa">CreateWindow</a> to create controls, such as buttons, check boxes, and static controls, use <i>lpWindowName</i> to specify the text of the control. When creating a static control with the <b>SS_ICON</b> style, use <i>lpWindowName</i> to specify the icon name or identifier. To specify an identifier, use the syntax "#<i>num</i>".</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="dwStyle">
            <para>Type: <b>DWORD</b> The style of the window being created. This parameter can be a combination of the <a href="https://docs.microsoft.com/windows/desktop/winmsg/window-styles">window style values</a>, plus the control styles indicated in the Remarks section.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="X">
            <para>Type: <b>int</b> The initial horizontal position of the window. For an overlapped or pop-up window, the <i>x</i> parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>x</i> is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If <i>x</i> is set to <b>CW_USEDEFAULT</b>, the system selects the default position for the window's upper-left corner and ignores the <i>y</i> parameter. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if it is specified for a pop-up or child window, the <i>x</i> and <i>y</i> parameters are set to zero.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Y">
            <para>Type: <b>int</b> The initial vertical position of the window. For an overlapped or pop-up window, the <i>y</i> parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>y</i> is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box <i>y</i> is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.</para>
            <para>If an overlapped window is created with the <b>WS_VISIBLE</b> style bit set and the <i>x</i> parameter is set to <b>CW_USEDEFAULT</b>, then the <i>y</i> parameter determines how the window is shown. If the <i>y</i> parameter is <b>CW_USEDEFAULT</b>, then the window manager calls <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-showwindow">ShowWindow</a> with the <b>SW_SHOW</b> flag after the window has been created. If the <i>y</i> parameter is some other value, then the window manager calls <b>ShowWindow</b> with that value as the <i>nCmdShow</i> parameter.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="nWidth">
            <para>Type: <b>int</b> The width, in device units, of the window. For overlapped windows, <i>nWidth</i> is the window's width, in screen coordinates, or <b>CW_USEDEFAULT</b>. If <i>nWidth</i> is <b>CW_USEDEFAULT</b>, the system selects a default width and height for the window; the default width extends from the initial x-coordinates to the right edge of the screen; the default height extends from the initial y-coordinate to the top of the icon area. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if <b>CW_USEDEFAULT</b> is specified for a pop-up or child window, the <i>nWidth</i> and <i>nHeight</i> parameter are set to zero.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="nHeight">
            <para>Type: <b>int</b> The height, in device units, of the window. For overlapped windows, <i>nHeight</i> is the window's height, in screen coordinates. If the <i>nWidth</i> parameter is set to <b>CW_USEDEFAULT</b>, the system ignores <i>nHeight</i>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="hWndParent">
            <para>Type: <b>HWND</b> A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows. To create a <a href="https://docs.microsoft.com/windows/desktop/winmsg/window-features">message-only window</a>, supply <b>HWND_MESSAGE</b> or a handle to an existing message-only window.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="hMenu">
            <para>Type: <b>HMENU</b> A handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, <i>hMenu</i> identifies the menu to be used with the window; it can be <b>NULL</b> if the class menu is to be used. For a child window, <i>hMenu</i> specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="hInstance">
            <para>Type: <b>HINSTANCE</b> A handle to the instance of the module to be associated with the window.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpParam">
            <para>Type: <b>LPVOID</b> Pointer to a value to be passed to the window through the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-createstructa">CREATESTRUCT</a> structure (<b>lpCreateParams</b> member) pointed to by the <i>lParam</i> param of the <b>WM_CREATE</b> message.  This message is sent to the created window by this function before it returns. If an application calls <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createwindowa">CreateWindow</a> to create a MDI client window, <i>lpParam</i> should point to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-clientcreatestruct">CLIENTCREATESTRUCT</a> structure. If an MDI client window calls <b>CreateWindow</b> to create an MDI child window, <i>lpParam</i> should point to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-mdicreatestructa">MDICREATESTRUCT</a> structure. <i>lpParam</i> may be <b>NULL</b> if no additional data is needed.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HWND</b> If the function succeeds, the return value is a handle to the new window. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. This function typically fails for one of the following reasons: </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createwindowexw">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.DestroyIcon(Windows.Win32.UI.WindowsAndMessaging.HICON)">
            <summary>Destroys an icon and frees any memory the icon occupied.</summary>
            <param name="hIcon">
            <para>Type: <b>HICON</b> A handle to the icon to be destroyed. The icon must not be in use.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroyicon#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroyicon">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.DestroyCursor(Windows.Win32.UI.WindowsAndMessaging.HCURSOR)">
            <summary>Destroys a cursor and frees any memory the cursor occupied. Do not use this function to destroy a shared cursor.</summary>
            <param name="hCursor">
            <para>Type: <b>HCURSOR</b> A handle to the cursor to be destroyed. The cursor must not be in use.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroycursor#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroycursor">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.RegisterClass(Windows.Win32.UI.WindowsAndMessaging.WNDCLASSW@)">
            <summary>Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.</summary>
            <param name="lpWndClass">
            <para>Type: <b>const WNDCLASS*</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-wndclassa">WNDCLASS</a> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerclassw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>ATOM</b> If the function succeeds, the return value is a class atom that uniquely identifies the class being registered. This atom can only be used by the <a href="/windows/desktop/api/winuser/nf-winuser-createwindowa">CreateWindow</a>, <a href="/windows/desktop/api/winuser/nf-winuser-createwindowexa">CreateWindowEx</a>, <a href="/windows/desktop/api/winuser/nf-winuser-getclassinfoa">GetClassInfo</a>, <a href="/windows/desktop/api/winuser/nf-winuser-getclassinfoexa">GetClassInfoEx</a>, <a href="/windows/desktop/api/winuser/nf-winuser-findwindowa">FindWindow</a>, <a href="/windows/desktop/api/winuser/nf-winuser-findwindowexa">FindWindowEx</a>, and <a href="/windows/desktop/api/winuser/nf-winuser-unregisterclassa">UnregisterClass</a> functions and the <b>IActiveIMMap::FilterClientWindows</b> method. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerclassw">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.DefWindowProc(Windows.Win32.Foundation.HWND,System.UInt32,Windows.Win32.Foundation.WPARAM,Windows.Win32.Foundation.LPARAM)">
            <summary>Calls the default window procedure to provide default processing for any window messages that an application does not process.</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window procedure that received the message.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Msg">
            <para>Type: <b>UINT</b> The message.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="wParam">
            <para>Type: <b>WPARAM</b> Additional message information. The content of this parameter depends on the value of the <i>Msg</i> parameter.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lParam">
            <para>Type: <b>LPARAM</b> Additional message information. The content of this parameter depends on the value of the <i>Msg</i> parameter.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>LRESULT</b> The return value is the result of the message processing and depends on the message.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-defwindowprocw">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.RegisterWindowMessage(System.String)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.RegisterWindowMessage(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.RegisterWindowMessage(Windows.Win32.Foundation.PCWSTR)">
            <summary>Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.</summary>
            <param name="lpString">
            <para>Type: <b>LPCTSTR</b> The message to be registered.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerwindowmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>UINT</b> If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-registerwindowmessagew">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.DestroyWindow(Windows.Win32.Foundation.HWND)">
            <summary>Destroys the specified window.</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window to be destroyed.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroywindow#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-destroywindow">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SetForegroundWindow(Windows.Win32.Foundation.HWND)">
            <summary>Brings the thread that created the specified window into the foreground and activates the window.</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window that should be activated and brought to the foreground.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setforegroundwindow#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the window was brought to the foreground, the return value is nonzero.</para>
            <para>If the window was not brought to the foreground, the return value is zero.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setforegroundwindow">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.ShowWindow(Windows.Win32.Foundation.HWND,Windows.Win32.UI.WindowsAndMessaging.SHOW_WINDOW_CMD)">
            <summary>Sets the specified window's show state.</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showwindow#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="nCmdShow">Type: <b>int</b></param>
            <returns>
            <para>Type: <b>BOOL</b> If the window was previously visible, the return value is nonzero. If the window was previously hidden, the return value is zero.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-showwindow">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SetWindowLong(Windows.Win32.Foundation.HWND,Windows.Win32.UI.WindowsAndMessaging.WINDOW_LONG_PTR_INDEX,System.Int32)">
            <summary>Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window and, indirectly, the class to which the window belongs.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowlongw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="nIndex">Type: <b>int</b></param>
            <param name="dwNewLong">
            <para>Type: <b>LONG</b> The replacement value.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowlongw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>LONG</b> If the function succeeds, the return value is the previous value of the specified 32-bit integer. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If the previous value of the specified 32-bit integer is zero, and the function succeeds, the return value is zero, but the function does not clear the last error information. This makes it difficult to determine success or failure. To deal with this, you should clear the last error information by calling <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-setlasterror">SetLastError</a> with 0 before calling <b>SetWindowLong</b>. Then, function failure will be indicated by a return value of zero and a <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> result that is nonzero.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowlongw">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetWindowLong(Windows.Win32.Foundation.HWND,Windows.Win32.UI.WindowsAndMessaging.WINDOW_LONG_PTR_INDEX)">
            <summary>Retrieves information about the specified window.</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window and, indirectly, the class to which the window belongs.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowlongw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="nIndex">Type: <b>int</b></param>
            <returns>
            <para>Type: <b>LONG</b> If the function succeeds, the return value is the requested value. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If <a href="/windows/desktop/api/winuser/nf-winuser-setwindowlonga">SetWindowLong</a> has not been called previously, <b>GetWindowLong</b> returns zero for values in the extra window or class memory.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowlongw">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetClientRect(Windows.Win32.Foundation.HWND,Windows.Win32.Foundation.RECT*)">
            <summary>Retrieves the coordinates of a window's client area.</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window whose client coordinates are to be retrieved.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclientrect#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpRect">
            <para>Type: <b>LPRECT</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that receives the client coordinates. The <b>left</b> and <b>top</b> members are zero. The <b>right</b> and <b>bottom</b> members contain the width and height of the window.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclientrect#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getclientrect">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.ReleaseDC(Windows.Win32.Foundation.HWND,Windows.Win32.Graphics.Gdi.HDC)">
            <summary>The ReleaseDC function releases a device context (DC), freeing it for use by other applications. The effect of the ReleaseDC function depends on the type of DC. It frees only common and window DCs. It has no effect on class or private DCs.</summary>
            <param name="hWnd">A handle to the window whose DC is to be released.</param>
            <param name="hDC">A handle to the DC to be released.</param>
            <returns>
            <para>The return value indicates whether the DC was released. If the DC was released, the return value is 1. If the DC was not released, the return value is zero.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-releasedc">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.FillRect(System.Runtime.InteropServices.SafeHandle,Windows.Win32.Foundation.RECT*,System.Runtime.InteropServices.SafeHandle)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.FillRect(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Foundation.RECT*,Windows.Win32.Graphics.Gdi.HBRUSH)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.FillRect(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Foundation.RECT*,Windows.Win32.Graphics.Gdi.HBRUSH)">
            <summary>The FillRect function fills a rectangle by using the specified brush. This function includes the left and top borders, but excludes the right and bottom borders of the rectangle.</summary>
            <param name="hDC">A handle to the device context.</param>
            <param name="lprc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that contains the logical coordinates of the rectangle to be filled.</param>
            <param name="hbr">A handle to the brush used to fill the rectangle.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-fillrect">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SetLayeredWindowAttributes(Windows.Win32.Foundation.HWND,System.UInt32,System.Byte,Windows.Win32.UI.WindowsAndMessaging.LAYERED_WINDOW_ATTRIBUTES_FLAGS)">
            <summary>Sets the opacity and transparency color key of a layered window.</summary>
            <param name="hwnd">
            <para>Type: <b>HWND</b> A handle to the layered window. A layered window is created by specifying <b>WS_EX_LAYERED</b> when creating the window with the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createwindowexa">CreateWindowEx</a> function or by setting <b>WS_EX_LAYERED</b> via <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setwindowlonga">SetWindowLong</a> after the window has been created. <b>Windows 8:  </b>The <b>WS_EX_LAYERED</b> style is supported for top-level windows and child windows. Previous Windows versions support <b>WS_EX_LAYERED</b> only for top-level windows.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setlayeredwindowattributes#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="crKey">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/gdi/colorref">COLORREF</a></b> A <a href="https://docs.microsoft.com/windows/desktop/gdi/colorref">COLORREF</a> structure that specifies the transparency color key to be used when composing the layered window. All pixels painted by the window in this color will be transparent. To generate a <b>COLORREF</b>, use the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/nf-wingdi-rgb">RGB</a> macro.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setlayeredwindowattributes#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="bAlpha">
            <para>Type: <b>BYTE</b> Alpha value used to describe the opacity of the layered window. Similar to the <b>SourceConstantAlpha</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/wingdi/ns-wingdi-blendfunction">BLENDFUNCTION</a> structure. When <i>bAlpha</i> is 0, the window is completely transparent. When <i>bAlpha</i> is 255, the window is opaque.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setlayeredwindowattributes#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="dwFlags">Type: <b>DWORD</b></param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setlayeredwindowattributes">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetDoubleClickTime">
            <summary>Retrieves the current double-click time for the mouse.</summary>
            <returns>
            <para>Type: <b>UINT</b> The return value specifies the current double-click time, in milliseconds. The maximum return value is 5000 milliseconds.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getdoubleclicktime">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetPhysicalCursorPos(Windows.Win32.Foundation.POINT*)">
            <summary>Retrieves the position of the cursor in physical coordinates.</summary>
            <param name="lpPoint">
            <para>Type: <b>LPPOINT</b> The position of the cursor, in physical coordinates.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getphysicalcursorpos#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> <b>TRUE</b> if successful; otherwise <b>FALSE</b>.</para>
            <para><a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> can be called to get more information about any error that is generated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getphysicalcursorpos">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetCursorPos(Windows.Win32.Foundation.POINT*)">
            <summary>Retrieves the position of the mouse cursor, in screen coordinates.</summary>
            <param name="lpPoint">
            <para>Type: <b>LPPOINT</b> A pointer to a <a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a> structure that receives the screen coordinates of the cursor.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getcursorpos#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> Returns nonzero if successful or zero otherwise. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getcursorpos">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.CalculatePopupWindowPosition(Windows.Win32.Foundation.POINT*,Windows.Win32.Foundation.SIZE*,System.UInt32,Windows.Win32.Foundation.RECT*,Windows.Win32.Foundation.RECT*)">
            <summary>Calculates an appropriate pop-up window position using the specified anchor point, pop-up window size, flags, and the optional exclude rectangle.</summary>
            <param name="anchorPoint">
            <para>Type: <b>const POINT*</b> The specified anchor point.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-calculatepopupwindowposition#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="windowSize">
            <para>Type: <b>const SIZE*</b> The specified window size.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-calculatepopupwindowposition#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="flags">
            <para>Type: <b>UINT</b> Use one of the following flags to specify how the function positions the pop-up window horizontally and vertically. The flags are the same as the vertical and horizontal positioning flags of the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-trackpopupmenuex">TrackPopupMenuEx</a> function.</para>
            <para>Use one of the following flags to specify how the function positions the pop-up window horizontally.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-calculatepopupwindowposition#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="excludeRect">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a>*</b> A pointer to a structure that specifies the exclude rectangle. It can be <b>NULL</b>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-calculatepopupwindowposition#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="popupWindowPosition">
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a>*</b> A pointer to a structure that specifies the pop-up window position.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-calculatepopupwindowposition#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-calculatepopupwindowposition">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.FindWindow(System.String,System.String)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.FindWindow(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.FindWindow(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR)">
            <summary>Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search.</summary>
            <param name="lpClassName">
            <para>Type: <b>LPCTSTR</b> The class name or a class atom created by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero. If <i>lpClassName</i> points to a string, it specifies the window class name. The class name can be any name registered with <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a>, or any of the predefined control-class names. If <i>lpClassName</i> is <b>NULL</b>, it finds any window whose title matches the <i>lpWindowName</i> parameter.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-findwindoww#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpWindowName">
            <para>Type: <b>LPCTSTR</b> The window name (the window's title). If this parameter is <b>NULL</b>, all window names match.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-findwindoww#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HWND</b> If the function succeeds, the return value is a handle to the window that has the specified class name and window name. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-findwindoww">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetIconInfo(System.Runtime.InteropServices.SafeHandle,Windows.Win32.UI.WindowsAndMessaging.ICONINFO*)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetIconInfo(Windows.Win32.UI.WindowsAndMessaging.HICON,Windows.Win32.UI.WindowsAndMessaging.ICONINFO*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetIconInfo(Windows.Win32.UI.WindowsAndMessaging.HICON,Windows.Win32.UI.WindowsAndMessaging.ICONINFO*)">
            <summary>Retrieves information about the specified icon or cursor.</summary>
            <param name="hIcon">Type: <b>HICON</b></param>
            <param name="piconinfo">
            <para>Type: <b>PICONINFO</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-iconinfo">ICONINFO</a> structure. The function fills in the structure's members.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-geticoninfo#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero and the function fills in the members of the specified <a href="/windows/desktop/api/winuser/ns-winuser-iconinfo">ICONINFO</a> structure. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-geticoninfo">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetSystemMetrics(Windows.Win32.UI.WindowsAndMessaging.SYSTEM_METRICS_INDEX)">
            <summary>Retrieves the specified system metric or system configuration setting.</summary>
            <param name="nIndex">Type: <b>int</b></param>
            <returns>
            <para>Type: <b>int</b> If the function succeeds, the return value is the requested system metric or configuration setting. If the function fails, the return value is 0. <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> does not provide extended error information.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getsystemmetrics">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetMessage(Windows.Win32.UI.WindowsAndMessaging.MSG*,Windows.Win32.Foundation.HWND,System.UInt32,System.UInt32)">
            <summary>Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval.</summary>
            <param name="lpMsg">
            <para>Type: <b>LPMSG</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a> structure that receives message information from the thread's message queue.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window whose messages are to be retrieved. The window must belong to the current thread.</para>
            <para>If <i>hWnd</i> is <b>NULL</b>, <b>GetMessage</b> retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b> (see the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a> structure). Therefore if hWnd is <b>NULL</b>, both window messages and thread messages are processed. If <i>hWnd</i> is -1, <b>GetMessage</b> retrieves only messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b>,  that is, thread messages as posted by  <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-postmessagea">PostMessage</a> (when the <i>hWnd</i> parameter is <b>NULL</b>) or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-postthreadmessagea">PostThreadMessage</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="wMsgFilterMin">
            <para>Type: <b>UINT</b> The integer value of the lowest message value to be retrieved. Use <b>WM_KEYFIRST</b> (0x0100) to specify the first keyboard message or <b>WM_MOUSEFIRST</b> (0x0200) to specify the first mouse message. Use <a href="https://docs.microsoft.com/windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMax</i> to specify only the <b>WM_INPUT</b> messages. If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="wMsgFilterMax">
            <para>Type: <b>UINT</b> The integer value of the highest message value to be retrieved. Use <b>WM_KEYLAST</b> to specify the last keyboard message or <b>WM_MOUSELAST</b> to specify the last mouse message.</para>
            <para>Use <a href="https://docs.microsoft.com/windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMin</i> to specify only the <b>WM_INPUT</b> messages. If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function retrieves a message other than <a href="/windows/desktop/winmsg/wm-quit">WM_QUIT</a>, the return value is nonzero. If the function retrieves the <a href="/windows/desktop/winmsg/wm-quit">WM_QUIT</a> message, the return value is zero. If there is an error, the return value is -1. For example, the function fails if <i>hWnd</i> is an invalid window handle or <i>lpMsg</i> is an invalid pointer. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. Because the return value can be nonzero, zero, or -1, avoid code like this:</para>
            <para></para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getmessagew">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.TranslateMessage(Windows.Win32.UI.WindowsAndMessaging.MSG*)">
            <summary>Translates virtual-key messages into character messages. The character messages are posted to the calling thread's message queue, to be read the next time the thread calls the GetMessage or PeekMessage function.</summary>
            <param name="lpMsg">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a>*</b> A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a> structure that contains message information retrieved from the calling thread's message queue by using the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getmessage">GetMessage</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-peekmessagea">PeekMessage</a> function.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-translatemessage#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the message is translated (that is, a character message is posted to the thread's message queue), the return value is nonzero. If the message is <a href="/windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a>, <a href="/windows/desktop/inputdev/wm-keyup">WM_KEYUP</a>, <a href="/windows/desktop/inputdev/wm-syskeydown">WM_SYSKEYDOWN</a>, or <a href="/windows/desktop/inputdev/wm-syskeyup">WM_SYSKEYUP</a>, the return value is nonzero, regardless of the translation. If the message is not translated (that is, a character message is not posted to the thread's message queue), the return value is zero.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-translatemessage">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.DispatchMessage(Windows.Win32.UI.WindowsAndMessaging.MSG*)">
            <summary>Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the GetMessage function.</summary>
            <param name="lpMsg">
            <para>Type: <b>const <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-msg">MSG</a>*</b> A pointer to a structure that contains the message.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dispatchmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>LRESULT</b> The return value specifies the value returned by the window procedure. Although its meaning depends on the message being dispatched, the return value generally is ignored.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-dispatchmessagew">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.PostThreadMessage(System.UInt32,System.UInt32,Windows.Win32.Foundation.WPARAM,Windows.Win32.Foundation.LPARAM)">
            <summary>Posts a message to the message queue of the specified thread. It returns without waiting for the thread to process the message.</summary>
            <param name="idThread">
            <para>Type: <b>DWORD</b> The identifier of the thread to which the message is to be posted. The function fails if the specified thread does not have a message queue. The system creates a thread's message queue when the thread makes its first call to one of the User or GDI functions. For more information, see the Remarks section. Message posting is subject to UIPI. The thread of a process can post messages only to posted-message queues of threads in processes of lesser or equal integrity level. This thread must have the <b>SE_TCB_NAME</b> privilege to post a message to a thread that belongs to a process with the same locally unique identifier (LUID) but is in a different desktop. Otherwise, the function fails and returns <b>ERROR_INVALID_THREAD_ID</b>. This thread must either belong to the same desktop as the calling thread or to a process with the same LUID. Otherwise, the function fails and returns <b>ERROR_INVALID_THREAD_ID</b>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postthreadmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Msg">
            <para>Type: <b>UINT</b> The type of message to be posted.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postthreadmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="wParam">
            <para>Type: <b>WPARAM</b> Additional message-specific information.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postthreadmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lParam">
            <para>Type: <b>LPARAM</b> Additional message-specific information.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postthreadmessagew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. <b>GetLastError</b> returns <b>ERROR_INVALID_THREAD_ID</b> if <i>idThread</i> is not a valid thread identifier, or if the thread specified by <i>idThread</i> does not have a message queue. <b>GetLastError</b> returns <b>ERROR_NOT_ENOUGH_QUOTA</b> when the message limit is hit.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-postthreadmessagew">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.AppendMenu(System.Runtime.InteropServices.SafeHandle,Windows.Win32.UI.WindowsAndMessaging.MENU_ITEM_FLAGS,System.UIntPtr,System.String)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.AppendMenu(Windows.Win32.UI.WindowsAndMessaging.HMENU,Windows.Win32.UI.WindowsAndMessaging.MENU_ITEM_FLAGS,System.UIntPtr,Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.AppendMenu(Windows.Win32.UI.WindowsAndMessaging.HMENU,Windows.Win32.UI.WindowsAndMessaging.MENU_ITEM_FLAGS,System.UIntPtr,Windows.Win32.Foundation.PCWSTR)">
            <summary>Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item.</summary>
            <param name="hMenu">
            <para>Type: <b>HMENU</b> A handle to the menu bar, drop-down menu, submenu, or shortcut menu to be changed.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-appendmenuw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="uFlags">Type: <b>UINT</b></param>
            <param name="uIDNewItem">
            <para>Type: <b>UINT_PTR</b> The identifier of the new menu item or, if the <i>uFlags</i> parameter is set to <b>MF_POPUP</b>, a handle to the drop-down menu or submenu.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-appendmenuw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpNewItem">
            <para>Type: <b>LPCTSTR</b> The content of the new menu item. The interpretation of <i>lpNewItem</i> depends on whether the <i>uFlags</i> parameter includes the following values. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-appendmenuw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-appendmenuw">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.CreatePopupMenu_SafeHandle">
            <inheritdoc cref="M:Windows.Win32.PInvoke.CreatePopupMenu"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.CreatePopupMenu">
            <summary>Creates a drop-down menu, submenu, or shortcut menu.</summary>
            <returns>
            <para>Type: <b>HMENU</b> If the function succeeds, the return value is a handle to the newly created menu. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-createpopupmenu">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.DeleteMenu(System.Runtime.InteropServices.SafeHandle,System.UInt32,Windows.Win32.UI.WindowsAndMessaging.MENU_ITEM_FLAGS)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.DeleteMenu(Windows.Win32.UI.WindowsAndMessaging.HMENU,System.UInt32,Windows.Win32.UI.WindowsAndMessaging.MENU_ITEM_FLAGS)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.DeleteMenu(Windows.Win32.UI.WindowsAndMessaging.HMENU,System.UInt32,Windows.Win32.UI.WindowsAndMessaging.MENU_ITEM_FLAGS)">
            <summary>Deletes an item from the specified menu. If the menu item opens a menu or submenu, this function destroys the handle to the menu or submenu and frees the memory used by the menu or submenu.</summary>
            <param name="hMenu">
            <para>Type: <b>HMENU</b> A handle to the menu to be changed.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-deletemenu#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="uPosition">
            <para>Type: <b>UINT</b> The menu item to be deleted, as determined by the <i>uFlags</i> parameter.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-deletemenu#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="uFlags">Type: <b>UINT</b></param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-deletemenu">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.TrackPopupMenuEx(System.Runtime.InteropServices.SafeHandle,System.UInt32,System.Int32,System.Int32,Windows.Win32.Foundation.HWND,Windows.Win32.UI.WindowsAndMessaging.TPMPARAMS*)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.TrackPopupMenuEx(Windows.Win32.UI.WindowsAndMessaging.HMENU,System.UInt32,System.Int32,System.Int32,Windows.Win32.Foundation.HWND,Windows.Win32.UI.WindowsAndMessaging.TPMPARAMS*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.TrackPopupMenuEx(Windows.Win32.UI.WindowsAndMessaging.HMENU,System.UInt32,System.Int32,System.Int32,Windows.Win32.Foundation.HWND,Windows.Win32.UI.WindowsAndMessaging.TPMPARAMS*)">
            <summary>Displays a shortcut menu at the specified location and tracks the selection of items on the shortcut menu. The shortcut menu can appear anywhere on the screen.</summary>
            <param name="hMenu">
            <para>Type: <b>HMENU</b> A handle to the shortcut menu to be displayed. This handle can be obtained by calling the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-createpopupmenu">CreatePopupMenu</a> function to create a new shortcut menu or by calling the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getsubmenu">GetSubMenu</a> function to retrieve a handle to a submenu associated with an existing menu item.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenuex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="uFlags">
            <para>Type: <b>UINT</b> Specifies function options.</para>
            <para>Use one of the following flags to specify how the function positions the shortcut menu horizontally.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenuex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="x">
            <para>Type: <b>int</b> The horizontal location of the shortcut menu, in screen coordinates.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenuex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="y">
            <para>Type: <b>int</b> The vertical location of the shortcut menu, in screen coordinates.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenuex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="hwnd">
            <para>Type: <b>HWND</b> A handle to the window that owns the shortcut menu. This window receives all messages from the menu. The window does not receive a <a href="https://docs.microsoft.com/windows/desktop/menurc/wm-command">WM_COMMAND</a> message from the menu until the function returns. If you specify TPM_NONOTIFY in the <i>fuFlags</i> parameter, the function does not send messages to the window identified by <i>hwnd</i>. However, you must still pass a window handle in <i>hwnd</i>. It can be any window handle from your application.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenuex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lptpm">
            <para>Type: <b>LPTPMPARAMS</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-tpmparams">TPMPARAMS</a> structure that specifies an area of the screen the menu should not overlap. This parameter can be <b>NULL</b>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenuex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If you specify <b>TPM_RETURNCMD</b> in the <i>fuFlags</i> parameter, the return value is the menu-item identifier of the item that the user selected. If the user cancels the menu without making a selection, or if an error occurs, the return value is zero. If you do not specify <b>TPM_RETURNCMD</b> in the <i>fuFlags</i> parameter, the return value is nonzero if the function succeeds and zero if it fails. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-trackpopupmenuex">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.UI.Shell.APPBARDATA32">
            <summary>Contains information about a system appbar message.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-appbardata">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.APPBARDATA32.cbSize">
            <summary>
            <para>Type: <b>DWORD</b> The size of the structure, in bytes.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-appbardata#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.APPBARDATA32.hWnd">
            <summary>
            <para>Type: <b>HWND</b> The handle to the appbar window. Not all messages use this member. See the individual message page to see if you need to provide an <b>hWind</b> value.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-appbardata#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.APPBARDATA32.uCallbackMessage">
            <summary>
            <para>Type: <b>UINT</b> An application-defined message identifier. The application uses the specified identifier for notification messages that it sends to the appbar identified by the <b>hWnd</b> member. This member is used when sending the <a href="https://docs.microsoft.com/windows/desktop/shell/abm-new">ABM_NEW</a> message.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-appbardata#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.APPBARDATA32.uEdge">
            <summary>
            <para>Type: <b>UINT</b> A value that specifies an edge of the screen. This member is used when sending one of these messages: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-appbardata#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.APPBARDATA32.rc">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a></b> A <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure whose use varies depending on the message:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-appbardata#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.APPBARDATA32.lParam">
            <summary>
            <para>Type: <b>LPARAM</b> A message-dependent value. This member is used with these messages: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-appbardata#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.UI.Shell.APPBARDATA64">
            <summary>Contains information about a system appbar message.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-appbardata">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.APPBARDATA64.cbSize">
            <summary>
            <para>Type: <b>DWORD</b> The size of the structure, in bytes.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-appbardata#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.APPBARDATA64.hWnd">
            <summary>
            <para>Type: <b>HWND</b> The handle to the appbar window. Not all messages use this member. See the individual message page to see if you need to provide an <b>hWind</b> value.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-appbardata#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.APPBARDATA64.uCallbackMessage">
            <summary>
            <para>Type: <b>UINT</b> An application-defined message identifier. The application uses the specified identifier for notification messages that it sends to the appbar identified by the <b>hWnd</b> member. This member is used when sending the <a href="https://docs.microsoft.com/windows/desktop/shell/abm-new">ABM_NEW</a> message.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-appbardata#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.APPBARDATA64.uEdge">
            <summary>
            <para>Type: <b>UINT</b> A value that specifies an edge of the screen. This member is used when sending one of these messages: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-appbardata#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.APPBARDATA64.rc">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a></b> A <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure whose use varies depending on the message:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-appbardata#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.APPBARDATA64.lParam">
            <summary>
            <para>Type: <b>LPARAM</b> A message-dependent value. This member is used with these messages: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-appbardata#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.UI.Shell.NOTIFYICONDATAW32">
            <summary>Contains information that the system needs to display notifications in the notification area. Used by Shell_NotifyIcon.</summary>
            <remarks>
            <para>See <a href="https://msdn.microsoft.com/library/aa511497.aspx">Notifications</a> in the Windows User Experience Interaction Guidelines for more information on notification UI and content best practices. If you set the <b>NIF_INFO</b> flag in the <b>uFlags</b> member, the balloon-style notification is used. For more discussion of these notifications, see <a href="https://docs.microsoft.com/windows/desktop/Controls/using-tooltip-contro">Balloon tooltips</a>. No more than one balloon notification at a time can be displayed for the taskbar. If an application attempts to display a notification when one is already being displayed, the new notification is queued and displayed when the older notification goes away. In versions of Windows before Windows Vista, the new notification would not appear until the existing notification has been visible for at least the system minimum timeout length, regardless of the original notification's <b>uTimeout</b> value. If the user does not appear to be using the computer, the system does not count this time toward the timeout. Several members of this structure are only supported for Windows 2000 and later. To enable these members, include one of the following lines in your header:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.cbSize">
            <summary>
            <para>Type: <b>DWORD</b> The size of this structure, in bytes.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.hWnd">
            <summary>
            <para>Type: <b>HWND</b> A handle to the window that receives notifications associated with an icon in the notification area.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.uID">
            <summary>
            <para>Type: <b>UINT</b> The application-defined identifier of the taskbar icon. The Shell uses either (<b>hWnd</b> plus <b>uID</b>) or <b>guidItem</b> to identify which icon to operate on when <a href="https://docs.microsoft.com/windows/desktop/api/shellapi/nf-shellapi-shell_notifyicona">Shell_NotifyIcon</a> is invoked. You can have multiple icons associated with a single <b>hWnd</b> by assigning each a different <b>uID</b>. If <b>guidItem</b> is specified, <b>uID</b> is ignored.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.uFlags">
            <summary>Type: <b>UINT</b></summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.uCallbackMessage">
            <summary>
            <para>Type: <b>UINT</b> An application-defined message identifier. The system uses this identifier to send notification messages to the window identified in <b>hWnd</b>. These notification messages are sent when a mouse event or hover occurs in the bounding rectangle of the icon, when the icon is selected or activated with the keyboard, or when those actions occur in the balloon notification.</para>
            <para>When the <b>uVersion</b> member is either 0 or NOTIFYICON_VERSION, the <i>wParam</i> parameter of the message contains the identifier of the taskbar icon in which the event occurred. This identifier can be 32 bits in length. The <i>lParam</i> parameter holds the mouse or keyboard message associated with the event. For example, when the pointer moves over a taskbar icon, <i>lParam</i> is set to <a href="https://docs.microsoft.com/windows/desktop/inputdev/wm-mousemove">WM_MOUSEMOVE</a>. When the <b>uVersion</b> member is NOTIFYICON_VERSION_4, applications continue to receive notification events in the form of application-defined messages through the <b>uCallbackMessage</b> member, but the interpretation of the <i>lParam</i> and <i>wParam</i> parameters of that message is changed as follows: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.hIcon">
            <summary>
            <para>Type: <b>HICON</b> A handle to the icon to be added, modified, or deleted. Windows XP and later support icons of up to 32 BPP. If only a 16x16 pixel icon is provided, it is scaled to a larger size in a system set to a high dpi value. This can lead to an unattractive result. It is recommended that you provide both a 16x16 pixel icon and a 32x32 icon in your resource file. Use <a href="https://docs.microsoft.com/windows/desktop/api/commctrl/nf-commctrl-loadiconmetric">LoadIconMetric</a> to ensure that the correct icon is loaded and scaled appropriately. See Remarks for a code example.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.szTip">
            <summary>
            <para>Type: <b>TCHAR[64]</b> A null-terminated string that specifies the text for a standard tooltip. It can have a maximum of 64 characters, including the terminating null character.</para>
            <para>For Windows 2000 and later, <b>szTip</b> can have a maximum of 128 characters, including the terminating null character.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.dwState">
            <summary>Type: <b>DWORD</b></summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.dwStateMask">
            <summary>
            <para>Type: <b>DWORD</b> <b>Windows 2000 and later</b>. A value that specifies which bits of the <b>dwState</b> member are retrieved or modified. The possible values are the same as those for <b>dwState</b>. For example, setting this member to <b>NIS_HIDDEN</b> causes only the item's hidden state to be modified while the icon sharing bit is ignored regardless of its value.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.szInfo">
            <summary>
            <para>Type: <b>TCHAR[256]</b> <b>Windows 2000 and later</b>. A null-terminated string that specifies the text to display in a balloon notification. It can have a maximum of 256 characters, including the terminating null character, but should be restricted to 200 characters in English to accommodate localization. To remove the balloon notification from the UI, either delete the icon (with <a href="https://docs.microsoft.com/windows/desktop/api/shellapi/nf-shellapi-shell_notifyicona">NIM_DELETE</a>) or set the <b>NIF_INFO</b> flag in <b>uFlags</b> and set <b>szInfo</b> to an empty string.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.szInfoTitle">
            <summary>
            <para>Type: <b>TCHAR[64]</b> <b>Windows 2000 and later</b>. A null-terminated string that specifies a title for a balloon notification. This title appears in a larger font immediately above the text. It can have a maximum of 64 characters, including the terminating null character, but should be restricted to 48 characters in English to accommodate localization.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.dwInfoFlags">
            <summary>
            <para>Type: <b>DWORD</b> <b>Windows 2000 and later</b>. Flags that can be set to modify the behavior and appearance of a balloon notification. The icon is placed to the left of the title. If the <b>szInfoTitle</b> member is zero-length, the icon is not shown.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.guidItem">
            <summary>
            <para>Type: <b>GUID</b> <b>Windows XP and later</b>.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.hBalloonIcon">
            <summary>
            <para>Type: <b>HICON</b> <b>Windows Vista and later</b>. The handle of a customized notification icon provided by the application that should be used independently of the notification area icon. If this member is non-NULL and the NIIF_USER flag is set in the <b>dwInfoFlags</b> member, this icon is used as the notification icon. If this member is <b>NULL</b>, the legacy behavior is carried out.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="P:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.__char_128.Length">
            <summary>Always <c>128</c>.</summary>
        </member>
        <member name="M:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.__char_128.ToString(System.Int32)">
            <summary>
            Copies the fixed array to a new string up to the specified length regardless of whether there are null terminating characters.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="length"/> is less than <c>0</c> or greater than <see cref="P:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.__char_128.Length"/>.
            </exception>
        </member>
        <member name="M:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.__char_128.ToString">
            <summary>
            Copies the fixed array to a new string, stopping before the first null terminator character or at the end of the fixed array (whichever is shorter).
            </summary>
        </member>
        <member name="P:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.__char_256.Length">
            <summary>Always <c>256</c>.</summary>
        </member>
        <member name="M:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.__char_256.ToString(System.Int32)">
            <summary>
            Copies the fixed array to a new string up to the specified length regardless of whether there are null terminating characters.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="length"/> is less than <c>0</c> or greater than <see cref="P:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.__char_256.Length"/>.
            </exception>
        </member>
        <member name="M:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.__char_256.ToString">
            <summary>
            Copies the fixed array to a new string, stopping before the first null terminator character or at the end of the fixed array (whichever is shorter).
            </summary>
        </member>
        <member name="P:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.__char_64.Length">
            <summary>Always <c>64</c>.</summary>
        </member>
        <member name="M:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.__char_64.ToString(System.Int32)">
            <summary>
            Copies the fixed array to a new string up to the specified length regardless of whether there are null terminating characters.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="length"/> is less than <c>0</c> or greater than <see cref="P:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.__char_64.Length"/>.
            </exception>
        </member>
        <member name="M:Windows.Win32.UI.Shell.NOTIFYICONDATAW32.__char_64.ToString">
            <summary>
            Copies the fixed array to a new string, stopping before the first null terminator character or at the end of the fixed array (whichever is shorter).
            </summary>
        </member>
        <member name="T:Windows.Win32.UI.Shell.NOTIFYICONDATAW64">
            <summary>Contains information that the system needs to display notifications in the notification area. Used by Shell_NotifyIcon.</summary>
            <remarks>
            <para>See <a href="https://msdn.microsoft.com/library/aa511497.aspx">Notifications</a> in the Windows User Experience Interaction Guidelines for more information on notification UI and content best practices. If you set the <b>NIF_INFO</b> flag in the <b>uFlags</b> member, the balloon-style notification is used. For more discussion of these notifications, see <a href="https://docs.microsoft.com/windows/desktop/Controls/using-tooltip-contro">Balloon tooltips</a>. No more than one balloon notification at a time can be displayed for the taskbar. If an application attempts to display a notification when one is already being displayed, the new notification is queued and displayed when the older notification goes away. In versions of Windows before Windows Vista, the new notification would not appear until the existing notification has been visible for at least the system minimum timeout length, regardless of the original notification's <b>uTimeout</b> value. If the user does not appear to be using the computer, the system does not count this time toward the timeout. Several members of this structure are only supported for Windows 2000 and later. To enable these members, include one of the following lines in your header:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.cbSize">
            <summary>
            <para>Type: <b>DWORD</b> The size of this structure, in bytes.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.hWnd">
            <summary>
            <para>Type: <b>HWND</b> A handle to the window that receives notifications associated with an icon in the notification area.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.uID">
            <summary>
            <para>Type: <b>UINT</b> The application-defined identifier of the taskbar icon. The Shell uses either (<b>hWnd</b> plus <b>uID</b>) or <b>guidItem</b> to identify which icon to operate on when <a href="https://docs.microsoft.com/windows/desktop/api/shellapi/nf-shellapi-shell_notifyicona">Shell_NotifyIcon</a> is invoked. You can have multiple icons associated with a single <b>hWnd</b> by assigning each a different <b>uID</b>. If <b>guidItem</b> is specified, <b>uID</b> is ignored.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.uFlags">
            <summary>Type: <b>UINT</b></summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.uCallbackMessage">
            <summary>
            <para>Type: <b>UINT</b> An application-defined message identifier. The system uses this identifier to send notification messages to the window identified in <b>hWnd</b>. These notification messages are sent when a mouse event or hover occurs in the bounding rectangle of the icon, when the icon is selected or activated with the keyboard, or when those actions occur in the balloon notification.</para>
            <para>When the <b>uVersion</b> member is either 0 or NOTIFYICON_VERSION, the <i>wParam</i> parameter of the message contains the identifier of the taskbar icon in which the event occurred. This identifier can be 32 bits in length. The <i>lParam</i> parameter holds the mouse or keyboard message associated with the event. For example, when the pointer moves over a taskbar icon, <i>lParam</i> is set to <a href="https://docs.microsoft.com/windows/desktop/inputdev/wm-mousemove">WM_MOUSEMOVE</a>. When the <b>uVersion</b> member is NOTIFYICON_VERSION_4, applications continue to receive notification events in the form of application-defined messages through the <b>uCallbackMessage</b> member, but the interpretation of the <i>lParam</i> and <i>wParam</i> parameters of that message is changed as follows: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.hIcon">
            <summary>
            <para>Type: <b>HICON</b> A handle to the icon to be added, modified, or deleted. Windows XP and later support icons of up to 32 BPP. If only a 16x16 pixel icon is provided, it is scaled to a larger size in a system set to a high dpi value. This can lead to an unattractive result. It is recommended that you provide both a 16x16 pixel icon and a 32x32 icon in your resource file. Use <a href="https://docs.microsoft.com/windows/desktop/api/commctrl/nf-commctrl-loadiconmetric">LoadIconMetric</a> to ensure that the correct icon is loaded and scaled appropriately. See Remarks for a code example.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.szTip">
            <summary>
            <para>Type: <b>TCHAR[64]</b> A null-terminated string that specifies the text for a standard tooltip. It can have a maximum of 64 characters, including the terminating null character.</para>
            <para>For Windows 2000 and later, <b>szTip</b> can have a maximum of 128 characters, including the terminating null character.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.dwState">
            <summary>Type: <b>DWORD</b></summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.dwStateMask">
            <summary>
            <para>Type: <b>DWORD</b> <b>Windows 2000 and later</b>. A value that specifies which bits of the <b>dwState</b> member are retrieved or modified. The possible values are the same as those for <b>dwState</b>. For example, setting this member to <b>NIS_HIDDEN</b> causes only the item's hidden state to be modified while the icon sharing bit is ignored regardless of its value.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.szInfo">
            <summary>
            <para>Type: <b>TCHAR[256]</b> <b>Windows 2000 and later</b>. A null-terminated string that specifies the text to display in a balloon notification. It can have a maximum of 256 characters, including the terminating null character, but should be restricted to 200 characters in English to accommodate localization. To remove the balloon notification from the UI, either delete the icon (with <a href="https://docs.microsoft.com/windows/desktop/api/shellapi/nf-shellapi-shell_notifyicona">NIM_DELETE</a>) or set the <b>NIF_INFO</b> flag in <b>uFlags</b> and set <b>szInfo</b> to an empty string.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.szInfoTitle">
            <summary>
            <para>Type: <b>TCHAR[64]</b> <b>Windows 2000 and later</b>. A null-terminated string that specifies a title for a balloon notification. This title appears in a larger font immediately above the text. It can have a maximum of 64 characters, including the terminating null character, but should be restricted to 48 characters in English to accommodate localization.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.dwInfoFlags">
            <summary>
            <para>Type: <b>DWORD</b> <b>Windows 2000 and later</b>. Flags that can be set to modify the behavior and appearance of a balloon notification. The icon is placed to the left of the title. If the <b>szInfoTitle</b> member is zero-length, the icon is not shown.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.guidItem">
            <summary>
            <para>Type: <b>GUID</b> <b>Windows XP and later</b>.</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.hBalloonIcon">
            <summary>
            <para>Type: <b>HICON</b> <b>Windows Vista and later</b>. The handle of a customized notification icon provided by the application that should be used independently of the notification area icon. If this member is non-NULL and the NIIF_USER flag is set in the <b>dwInfoFlags</b> member, this icon is used as the notification icon. If this member is <b>NULL</b>, the legacy behavior is carried out.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//shellapi/ns-shellapi-notifyicondataw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="P:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.__char_128.Length">
            <summary>Always <c>128</c>.</summary>
        </member>
        <member name="M:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.__char_128.ToString(System.Int32)">
            <summary>
            Copies the fixed array to a new string up to the specified length regardless of whether there are null terminating characters.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="length"/> is less than <c>0</c> or greater than <see cref="P:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.__char_128.Length"/>.
            </exception>
        </member>
        <member name="M:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.__char_128.ToString">
            <summary>
            Copies the fixed array to a new string, stopping before the first null terminator character or at the end of the fixed array (whichever is shorter).
            </summary>
        </member>
        <member name="P:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.__char_256.Length">
            <summary>Always <c>256</c>.</summary>
        </member>
        <member name="M:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.__char_256.ToString(System.Int32)">
            <summary>
            Copies the fixed array to a new string up to the specified length regardless of whether there are null terminating characters.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="length"/> is less than <c>0</c> or greater than <see cref="P:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.__char_256.Length"/>.
            </exception>
        </member>
        <member name="M:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.__char_256.ToString">
            <summary>
            Copies the fixed array to a new string, stopping before the first null terminator character or at the end of the fixed array (whichever is shorter).
            </summary>
        </member>
        <member name="P:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.__char_64.Length">
            <summary>Always <c>64</c>.</summary>
        </member>
        <member name="M:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.__char_64.ToString(System.Int32)">
            <summary>
            Copies the fixed array to a new string up to the specified length regardless of whether there are null terminating characters.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="length"/> is less than <c>0</c> or greater than <see cref="P:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.__char_64.Length"/>.
            </exception>
        </member>
        <member name="M:Windows.Win32.UI.Shell.NOTIFYICONDATAW64.__char_64.ToString">
            <summary>
            Copies the fixed array to a new string, stopping before the first null terminator character or at the end of the fixed array (whichever is shorter).
            </summary>
        </member>
        <member name="T:Windows.Win32.UI.WindowsAndMessaging.ICONINFO">
            <summary>Contains information about an icon or a cursor.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-iconinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.ICONINFO.fIcon">
            <summary>
            <para>Type: <b>BOOL</b> Specifies whether this structure defines an icon or a cursor. A value of <b>TRUE</b> specifies an icon; <b>FALSE</b> specifies a cursor.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-iconinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.ICONINFO.xHotspot">
            <summary>
            <para>Type: <b>DWORD</b> The x-coordinate of a cursor's hot spot. If this structure defines an icon, the hot spot is always in the center of the icon, and this member is ignored.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-iconinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.ICONINFO.yHotspot">
            <summary>
            <para>Type: <b>DWORD</b> The y-coordinate of the cursor's hot spot. If this structure defines an icon, the hot spot is always in the center of the icon, and this member is ignored.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-iconinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.ICONINFO.hbmMask">
            <summary>
            <para>Type: <b>HBITMAP</b> The icon bitmask bitmap. If this structure defines a black and white icon, this bitmask is formatted so that the upper half is the icon AND bitmask and the lower half is the icon XOR bitmask. Under this condition, the height should be an even multiple of two. If this structure defines a color icon, this mask only defines the AND bitmask of the icon.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-iconinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.ICONINFO.hbmColor">
            <summary>
            <para>Type: <b>HBITMAP</b> A handle to the icon color bitmap. This member can be optional if this structure defines a black and white icon. The AND bitmask of <b>hbmMask</b> is applied with the <b>SRCAND</b> flag to the destination; subsequently, the color bitmap is applied (using XOR) to the destination by using the <b>SRCINVERT</b> flag.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-iconinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.UI.WindowsAndMessaging.MSG">
            <summary>Contains message information from a thread's message queue.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-msg">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.MSG.hwnd">
            <summary>
            <para>Type: <b>HWND</b> A handle to the window whose window procedure receives the message. This member is <b>NULL</b> when the message is a thread message.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-msg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.MSG.message">
            <summary>
            <para>Type: <b>UINT</b> The message identifier. Applications can only use the low word; the high word is reserved by the system.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-msg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.MSG.wParam">
            <summary>
            <para>Type: <b>WPARAM</b> Additional information about the message. The exact meaning depends on the value of the <b>message</b> member.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-msg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.MSG.lParam">
            <summary>
            <para>Type: <b>LPARAM</b> Additional information about the message. The exact meaning depends on the value of the <b>message</b> member.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-msg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.MSG.time">
            <summary>
            <para>Type: <b>DWORD</b> The time at which the message was posted.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-msg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.MSG.pt">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/previous-versions/dd162805(v=vs.85)">POINT</a></b> The cursor position, in screen coordinates, when the message was posted.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-msg#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.UI.WindowsAndMessaging.TPMPARAMS">
            <summary>Contains extended parameters for the TrackPopupMenuEx function.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-tpmparams">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.TPMPARAMS.cbSize">
            <summary>
            <para>Type: <b>UINT</b> The size of structure, in bytes.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-tpmparams#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.TPMPARAMS.rcExclude">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a></b> The rectangle to be excluded when positioning the window, in screen coordinates.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-tpmparams#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.UI.WindowsAndMessaging.WNDCLASSW">
            <summary>Contains the window class attributes that are registered by the RegisterClass function.</summary>
            <remarks>
            <para>> [!NOTE] > The winuser.h header defines WNDCLASS as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-wndclassw#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.WNDCLASSW.style">
            <summary>
            <para>Type: <b>UINT</b> The class style(s). This member can be any combination of the <a href="https://docs.microsoft.com/windows/desktop/winmsg/about-window-classes">Class Styles</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-wndclassw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.WNDCLASSW.lpfnWndProc">
            <summary>
            <para>Type: <b>WNDPROC</b> A pointer to the window procedure. You must use the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-callwindowproca">CallWindowProc</a> function to call the window procedure. For more information, see <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ms633573(v=vs.85)">WindowProc</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-wndclassw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.WNDCLASSW.cbClsExtra">
            <summary>
            <para>Type: <b>int</b> The number of extra bytes to allocate following the window-class structure. The system initializes the bytes to zero.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-wndclassw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.WNDCLASSW.cbWndExtra">
            <summary>
            <para>Type: <b>int</b> The number of extra bytes to allocate following the window instance. The system initializes the bytes to zero. If an application uses <b>WNDCLASS</b> to register a dialog box created by using the <b>CLASS</b> directive in the resource file, it must set this member to <b>DLGWINDOWEXTRA</b>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-wndclassw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.WNDCLASSW.hInstance">
            <summary>
            <para>Type: <b>HINSTANCE</b> A handle to the instance that contains the window procedure for the class.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-wndclassw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.WNDCLASSW.hIcon">
            <summary>
            <para>Type: <b>HICON</b> A handle to the class icon. This member must be a handle to an icon resource. If this member is <b>NULL</b>, the system provides a default icon.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-wndclassw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.WNDCLASSW.hCursor">
            <summary>
            <para>Type: <b>HCURSOR</b> A handle to the class cursor. This member must be a handle to a cursor resource. If this member is <b>NULL</b>, an application must explicitly set the cursor shape whenever the mouse moves into the application's window.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-wndclassw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.WNDCLASSW.hbrBackground">
            <summary>
            <para>Type: <b>HBRUSH</b> A handle to the class background brush. This member can be a handle to the physical brush to be used for painting the background, or it can be a color value. A color value must be one of the following standard system colors (the value 1 must be added to the chosen color). If a color value is given, you must convert it to one of the following <b>HBRUSH</b> types:</para>
            <para></para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-wndclassw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.WNDCLASSW.lpszMenuName">
            <summary>
            <para>Type: <b>LPCTSTR</b> The resource name of the class menu, as the name appears in the resource file. If you use an integer to identify the menu, use the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-makeintresourcea">MAKEINTRESOURCE</a> macro. If this member is <b>NULL</b>, windows belonging to this class have no default menu.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-wndclassw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.WindowsAndMessaging.WNDCLASSW.lpszClassName">
            <summary>
            <para>Type: <b>LPCTSTR</b> A pointer to a null-terminated string or is an atom. If this parameter is an atom, it must be a class atom created by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a> function. The atom must be in the low-order word of <b>lpszClassName</b>; the high-order word must be zero.</para>
            <para>If <b>lpszClassName</b> is a string, it specifies the window class name. The class name can be any name registered with <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a>, or any of the predefined control-class names. The maximum length for <b>lpszClassName</b> is 256. If <b>lpszClassName</b> is greater than the maximum length, the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> function will fail.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/ns-winuser-wndclassw#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.PCWSTR">
            <summary>
            A pointer to a constant character string.
            </summary>
        </member>
        <member name="F:Windows.Win32.Foundation.PCWSTR.Value">
            <summary>
            A pointer to the first character in the string. The content should be considered readonly, as it was typed as constant in the SDK.
            </summary>
        </member>
        <member name="P:Windows.Win32.Foundation.PCWSTR.Length">
            <summary>
            Gets the number of characters up to the first null character (exclusive).
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.PCWSTR.ToString">
            <summary>
            Returns a <see langword="string"/> with a copy of this character array.
            </summary>
            <returns>A <see langword="string"/>, or <see langword="null"/> if <see cref="F:Windows.Win32.Foundation.PCWSTR.Value"/> is <see langword="null"/>.</returns>
        </member>
        <member name="T:Windows.Win32.Foundation.POINT">
            <summary>The POINT structure defines the x- and y-coordinates of a point.</summary>
            <remarks>
            <para>The POINT structure is identical to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-pointl">POINTL</a> structure.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//windef/ns-windef-point#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Foundation.POINT.x">
            <summary>Specifies the <i>x</i>-coordinate of the point.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.POINT.y">
            <summary>Specifies the <i>y</i>-coordinate of the point.</summary>
        </member>
        <member name="T:Windows.Win32.Foundation.RECT">
            <summary>The RECT structure defines a rectangle by the coordinates of its upper-left and lower-right corners.</summary>
            <remarks>
            <para>The RECT structure is identical to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rectl">RECTL</a> structure.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//windef/ns-windef-rect#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.left">
            <summary>Specifies the <i>x</i>-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.top">
            <summary>Specifies the <i>y</i>-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.right">
            <summary>Specifies the <i>x</i>-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.bottom">
            <summary>Specifies the <i>y</i>-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="T:Windows.Win32.Foundation.SIZE">
            <summary>The SIZE structure defines the width and height of a rectangle.</summary>
            <remarks>
            <para>The rectangle dimensions stored in this structure can correspond to viewport extents, window extents, text extents, bitmap dimensions, or the aspect-ratio filter for some extended functions.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//windef/ns-windef-size#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Foundation.SIZE.cx">
            <summary>Specifies the rectangle's width. The units depend on which function uses this structure.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.SIZE.cy">
            <summary>Specifies the rectangle's height. The units depend on which function uses this structure.</summary>
        </member>
        <member name="T:Windows.Win32.DeleteObjectSafeHandle">
            <summary>
            Represents a Win32 handle that can be closed with <see cref="M:Windows.Win32.PInvoke.DeleteObject(Windows.Win32.Graphics.Gdi.HGDIOBJ)"/>.
            </summary>
        </member>
        <member name="T:Windows.Win32.DestroyMenuSafeHandle">
            <summary>
            Represents a Win32 handle that can be closed with <see cref="M:Windows.Win32.PInvoke.DestroyMenu(Windows.Win32.UI.WindowsAndMessaging.HMENU)"/>.
            </summary>
        </member>
        <member name="T:Windows.Win32.Storage.Packaging.Appx.PACKAGE_ID">
            <summary>Represents package identification information, such as name, version, and publisher.</summary>
            <remarks>
            <para>For info about string size limits, see <a href="https://docs.microsoft.com/windows/desktop/appxpkg/identity-constants">Identity constants</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//appmodel/ns-appmodel-package_id#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Storage.Packaging.Appx.PACKAGE_ID.reserved">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT32</a></b> Reserved; do not use.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//appmodel/ns-appmodel-package_id#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Windows.Win32.Storage.Packaging.Appx.PACKAGE_ID.processorArchitecture" -->
        <member name="F:Windows.Win32.Storage.Packaging.Appx.PACKAGE_ID.version">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/api/appmodel/ns-appmodel-package_version">PACKAGE_VERSION</a></b> The version of the package.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//appmodel/ns-appmodel-package_id#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.Packaging.Appx.PACKAGE_ID.name">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">PWSTR</a></b> The name of the package.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//appmodel/ns-appmodel-package_id#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.Packaging.Appx.PACKAGE_ID.publisher">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">PWSTR</a></b> The publisher of the package. If there is no publisher for the package, this member is <b>NULL</b>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//appmodel/ns-appmodel-package_id#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.Packaging.Appx.PACKAGE_ID.resourceId">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">PWSTR</a></b> The resource identifier (ID) of the package. If there is no resource ID for the package, this member is <b>NULL</b>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//appmodel/ns-appmodel-package_id#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Storage.Packaging.Appx.PACKAGE_ID.publisherId">
            <summary>
            <para>Type: <b><a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">PWSTR</a></b> The publisher identifier (ID) of the package. If there is no publisher ID for the package, this member is <b>NULL</b>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//appmodel/ns-appmodel-package_id#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Storage.Packaging.Appx.PACKAGE_VERSION">
            <summary>Represents the package version information.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//appmodel/ns-appmodel-package_version">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.System.Threading.PROCESS_INFORMATION_CLASS">
            <summary>Indicates a specific class of process information.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//processthreadsapi/ne-processthreadsapi-process_information_class#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Threading.PROCESS_INFORMATION_CLASS.ProcessMemoryPriority">
            <summary>The process information is represented by a <a href="https://docs.microsoft.com/windows/win32/api/processthreadsapi/ns-processthreadsapi-memory_priority_information">MEMORY_PRIORITY_INFORMATION</a> structure. Allows applications to lower the default memory priority of threads that perform background operations or access files and data that are not expected to be accessed again soon.</summary>
        </member>
        <member name="F:Windows.Win32.System.Threading.PROCESS_INFORMATION_CLASS.ProcessMemoryExhaustionInfo">
            <summary>The process information is represented by a <a href="https://docs.microsoft.com/windows/win32/api/processthreadsapi/ns-processthreadsapi-process_memory_exhaustion_info">PROCESS_MEMORY_EXHAUSTION_INFO</a> structure. Allows applications to configure a process to terminate if an allocation fails to commit memory.</summary>
        </member>
        <member name="F:Windows.Win32.System.Threading.PROCESS_INFORMATION_CLASS.ProcessAppMemoryInfo">
            <summary>The process information is represented by a <a href="https://docs.microsoft.com/windows/win32/api/processthreadsapi/ns-processthreadsapi-app_memory_information">APP_MEMORY_INFORMATION</a> structure. Allows applications to query the commit usage and the additional commit available to this process. Does not allow the caller to actually get a commit limit.</summary>
        </member>
        <member name="F:Windows.Win32.System.Threading.PROCESS_INFORMATION_CLASS.ProcessInPrivateInfo">
            <summary>If a process is set to **ProcessInPrivate** mode, and a trace session has set the [EVENT_ENABLE_PROPERTY_EXCLUDE_INPRIVATE](../evntrace/ns-evntrace-enable_trace_parameters.md) flag, then the trace session will drop all events from that process.</summary>
        </member>
        <member name="F:Windows.Win32.System.Threading.PROCESS_INFORMATION_CLASS.ProcessPowerThrottling">
            <summary>The process information is represented by a <a href="https://docs.microsoft.com/windows/win32/api/processthreadsapi/ns-processthreadsapi-process_power_throttling_state">PROCESS_POWER_THROTTLING_STATE</a> structure. Allows applications to configure how the system should throttle the target process’s activity when managing power.</summary>
        </member>
        <member name="F:Windows.Win32.System.Threading.PROCESS_INFORMATION_CLASS.ProcessReservedValue1">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Windows.Win32.System.Threading.PROCESS_INFORMATION_CLASS.ProcessTelemetryCoverageInfo">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Windows.Win32.System.Threading.PROCESS_INFORMATION_CLASS.ProcessProtectionLevelInfo">
            <summary>The process information is represented by a <a href="https://docs.microsoft.com/windows/desktop/api/processthreadsapi/ns-processthreadsapi-process_protection_level_information">PROCESS_PROTECTION_LEVEL_INFORMATION</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.System.Threading.PROCESS_INFORMATION_CLASS.ProcessLeapSecondInfo">
            <summary>The process information is represented by a <a href="../processthreadsapi/ns-processthreadsapi-process_leap_second_info.md">PROCESS_LEAP_SECOND_INFO</a> structure.</summary>
        </member>
        <member name="F:Windows.Win32.System.Threading.PROCESS_INFORMATION_CLASS.ProcessInformationClassMax">
            <summary>The maximum value for this enumeration. This value may change in a future version.</summary>
        </member>
        <member name="T:Windows.Win32.System.Threading.PROCESS_POWER_THROTTLING_STATE">
            <summary>Specifies the throttling policies and how to apply them to a target process when that process is subject to power management.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//processthreadsapi/ns-processthreadsapi-process_power_throttling_state">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.Threading.PROCESS_POWER_THROTTLING_STATE.Version">
            <summary>
            <para>The version of the <b>PROCESS_POWER_THROTTLING_STATE</b> structure. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//processthreadsapi/ns-processthreadsapi-process_power_throttling_state#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Threading.PROCESS_POWER_THROTTLING_STATE.ControlMask">
            <summary>
            <para>This field enables the caller to take control of the power throttling mechanism. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//processthreadsapi/ns-processthreadsapi-process_power_throttling_state#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.Threading.PROCESS_POWER_THROTTLING_STATE.StateMask">
            <summary>
            <para>Manages the power throttling mechanism on/off state. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//processthreadsapi/ns-processthreadsapi-process_power_throttling_state#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
    </members>
</doc>
